{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `cargo-clippy`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/Users/bubu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/src/lib.rs","byte_start":1074,"byte_end":1098,"line_start":23,"line_end":23,"column_start":13,"column_end":37,"is_primary":true,"text":[{"text":"#![cfg_attr(feature = \"cargo-clippy\", allow(clippy::unreadable_literal))]","highlight_start":13,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `clang_10_0`, `clang_11_0`, `clang_12_0`, `clang_13_0`, `clang_14_0`, `clang_15_0`, `clang_16_0`, `clang_17_0`, `clang_18_0`, `clang_3_5`, `clang_3_6`, `clang_3_7`, `clang_3_8`, `clang_3_9`, `clang_4_0`, `clang_5_0`, `clang_6_0`, `clang_7_0`, `clang_8_0`, `clang_9_0`, `libcpp`, `libloading`, `runtime`, and `static`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `cargo-clippy` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `cargo-clippy`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/bubu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/src/lib.rs:23:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(feature = \"cargo-clippy\", allow(clippy::unreadable_literal))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `clang_10_0`, `clang_11_0`, `clang_12_0`, `clang_13_0`, `clang_14_0`, `clang_15_0`, `clang_16_0`, `clang_17_0`, `clang_18_0`, `clang_3_5`, `clang_3_6`, `clang_3_7`, `clang_3_8`, `clang_3_9`, `clang_4_0`, `clang_5_0`, `clang_6_0`, `clang_7_0`, `clang_8_0`, `clang_9_0`, `libcpp`, `libloading`, `runtime`, and `static`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `cargo-clippy` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `cargo-clippy`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/Users/bubu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/src/link.rs","byte_start":6427,"byte_end":6449,"line_start":173,"line_end":173,"column_start":24,"column_end":46,"is_primary":true,"text":[{"text":"            #[cfg_attr(feature=\"cargo-clippy\", allow(clippy::missing_safety_doc))]","highlight_start":24,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/bubu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/src/lib.rs","byte_start":68113,"byte_end":110009,"line_start":1859,"line_end":2433,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"link! {","highlight_start":1,"highlight_end":8},{"text":"    pub fn clang_CXCursorSet_contains(set: CXCursorSet, cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":85},{"text":"    pub fn clang_CXCursorSet_insert(set: CXCursorSet, cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_CXIndex_getGlobalOptions(index: CXIndex) -> CXGlobalOptFlags;","highlight_start":1,"highlight_end":79},{"text":"    pub fn clang_CXIndex_setGlobalOptions(index: CXIndex, flags: CXGlobalOptFlags);","highlight_start":1,"highlight_end":84},{"text":"    /// Only available on `libclang` 6.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_6_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXIndex_setInvocationEmissionPathOption(index: CXIndex, path: *const c_char);","highlight_start":1,"highlight_end":95},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXXConstructor_isConvertingConstructor(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":85},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXXConstructor_isCopyConstructor(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":79},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXXConstructor_isDefaultConstructor(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":82},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXXConstructor_isMoveConstructor(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":79},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXXField_isMutable(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":65},{"text":"    pub fn clang_CXXMethod_isConst(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":64},{"text":"    /// Only available on `libclang` 16.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_16_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_CXXMethod_isCopyAssignmentOperator(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":81},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXXMethod_isDefaulted(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":68},{"text":"    /// Only available on `libclang` 16.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_16_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_CXXMethod_isDeleted(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":66},{"text":"    /// Only available on `libclang` 16.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_16_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_CXXMethod_isMoveAssignmentOperator(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":81},{"text":"    pub fn clang_CXXMethod_isPureVirtual(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":70},{"text":"    pub fn clang_CXXMethod_isStatic(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":65},{"text":"    pub fn clang_CXXMethod_isVirtual(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":66},{"text":"    /// Only available on `libclang` 17.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_17_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_CXXMethod_isExplicit(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":67},{"text":"    /// Only available on `libclang` 6.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_6_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXXRecord_isAbstract(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_CompilationDatabase_dispose(database: CXCompilationDatabase);","highlight_start":1,"highlight_end":79},{"text":"    pub fn clang_CompilationDatabase_fromDirectory(directory: *const c_char, error: *mut CXCompilationDatabase_Error) -> CXCompilationDatabase;","highlight_start":1,"highlight_end":144},{"text":"    pub fn clang_CompilationDatabase_getAllCompileCommands(database: CXCompilationDatabase) -> CXCompileCommands;","highlight_start":1,"highlight_end":114},{"text":"    pub fn clang_CompilationDatabase_getCompileCommands(database: CXCompilationDatabase, filename: *const c_char) -> CXCompileCommands;","highlight_start":1,"highlight_end":136},{"text":"    pub fn clang_CompileCommand_getArg(command: CXCompileCommand, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":94},{"text":"    pub fn clang_CompileCommand_getDirectory(command: CXCompileCommand) -> CXString;","highlight_start":1,"highlight_end":85},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CompileCommand_getFilename(command: CXCompileCommand) -> CXString;","highlight_start":1,"highlight_end":84},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CompileCommand_getMappedSourceContent(command: CXCompileCommand, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":110},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CompileCommand_getMappedSourcePath(command: CXCompileCommand, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":107},{"text":"    pub fn clang_CompileCommand_getNumArgs(command: CXCompileCommand) -> c_uint;","highlight_start":1,"highlight_end":81},{"text":"    pub fn clang_CompileCommand_getNumMappedSources(command: CXCompileCommand) -> c_uint;","highlight_start":1,"highlight_end":90},{"text":"    pub fn clang_CompileCommands_dispose(command: CXCompileCommands);","highlight_start":1,"highlight_end":70},{"text":"    pub fn clang_CompileCommands_getCommand(command: CXCompileCommands, index: c_uint) -> CXCompileCommand;","highlight_start":1,"highlight_end":108},{"text":"    pub fn clang_CompileCommands_getSize(command: CXCompileCommands) -> c_uint;","highlight_start":1,"highlight_end":80},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_Evaluate(cursor: CXCursor) -> CXEvalResult;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_Cursor_getArgument(cursor: CXCursor, index: c_uint) -> CXCursor;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_Cursor_getBriefCommentText(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":75},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getCXXManglings(cursor: CXCursor) -> *mut CXStringSet;","highlight_start":1,"highlight_end":79},{"text":"    pub fn clang_Cursor_getCommentRange(cursor: CXCursor) -> CXSourceRange;","highlight_start":1,"highlight_end":76},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getMangling(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_Cursor_getModule(cursor: CXCursor) -> CXModule;","highlight_start":1,"highlight_end":65},{"text":"    pub fn clang_Cursor_getNumArguments(cursor: CXCursor) -> c_int;","highlight_start":1,"highlight_end":68},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getNumTemplateArguments(cursor: CXCursor) -> c_int;","highlight_start":1,"highlight_end":76},{"text":"    pub fn clang_Cursor_getObjCDeclQualifiers(cursor: CXCursor) -> CXObjCDeclQualifierKind;","highlight_start":1,"highlight_end":92},{"text":"    /// Only available on `libclang` 6.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_6_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getObjCManglings(cursor: CXCursor) -> *mut CXStringSet;","highlight_start":1,"highlight_end":80},{"text":"    pub fn clang_Cursor_getObjCPropertyAttributes(cursor: CXCursor, reserved: c_uint) -> CXObjCPropertyAttrKind;","highlight_start":1,"highlight_end":113},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getObjCPropertyGetterName(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":81},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getObjCPropertySetterName(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":81},{"text":"    pub fn clang_Cursor_getObjCSelectorIndex(cursor: CXCursor) -> c_int;","highlight_start":1,"highlight_end":73},{"text":"    /// Only available on `libclang` 3.7 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_7\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getOffsetOfField(cursor: CXCursor) -> c_longlong;","highlight_start":1,"highlight_end":74},{"text":"    pub fn clang_Cursor_getRawCommentText(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":73},{"text":"    pub fn clang_Cursor_getReceiverType(cursor: CXCursor) -> CXType;","highlight_start":1,"highlight_end":69},{"text":"    pub fn clang_Cursor_getSpellingNameRange(cursor: CXCursor, index: c_uint, reserved: c_uint) -> CXSourceRange;","highlight_start":1,"highlight_end":114},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getStorageClass(cursor: CXCursor) -> CX_StorageClass;","highlight_start":1,"highlight_end":78},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getTemplateArgumentKind(cursor: CXCursor, index: c_uint) -> CXTemplateArgumentKind;","highlight_start":1,"highlight_end":108},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getTemplateArgumentType(cursor: CXCursor, index: c_uint) -> CXType;","highlight_start":1,"highlight_end":92},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getTemplateArgumentUnsignedValue(cursor: CXCursor, index: c_uint) -> c_ulonglong;","highlight_start":1,"highlight_end":106},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getTemplateArgumentValue(cursor: CXCursor, index: c_uint) -> c_longlong;","highlight_start":1,"highlight_end":97},{"text":"    pub fn clang_Cursor_getTranslationUnit(cursor: CXCursor) -> CXTranslationUnit;","highlight_start":1,"highlight_end":83},{"text":"    /// Only available on `libclang` 12.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_12_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_Cursor_getVarDeclInitializer(cursor: CXCursor) -> CXCursor;","highlight_start":1,"highlight_end":77},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_hasAttrs(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":62},{"text":"    /// Only available on `libclang` 12.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_12_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_Cursor_hasVarDeclGlobalStorage(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":77},{"text":"    /// Only available on `libclang` 12.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_12_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_Cursor_hasVarDeclExternalStorage(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":79},{"text":"    /// Only available on `libclang` 3.7 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_7\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_isAnonymous(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":65},{"text":"    /// Only available on `libclang` 9.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_9_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_isAnonymousRecordDecl(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":75},{"text":"    pub fn clang_Cursor_isBitField(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":64},{"text":"    pub fn clang_Cursor_isDynamicCall(cursor: CXCursor) -> c_int;","highlight_start":1,"highlight_end":66},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_isExternalSymbol(cursor: CXCursor, language: *mut CXString, from: *mut CXString, generated: *mut c_uint) -> c_uint;","highlight_start":1,"highlight_end":140},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_isFunctionInlined(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":71},{"text":"    /// Only available on `libclang` 9.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_9_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_isInlineNamespace(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":71},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_isMacroBuiltin(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":68},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_isMacroFunctionLike(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":73},{"text":"    pub fn clang_Cursor_isNull(cursor: CXCursor) -> c_int;","highlight_start":1,"highlight_end":59},{"text":"    pub fn clang_Cursor_isObjCOptional(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_Cursor_isVariadic(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":64},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EnumDecl_isScoped(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":64},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_dispose(result: CXEvalResult);","highlight_start":1,"highlight_end":59},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_getAsDouble(result: CXEvalResult) -> libc::c_double;","highlight_start":1,"highlight_end":81},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_getAsInt(result: CXEvalResult) -> c_int;","highlight_start":1,"highlight_end":69},{"text":"    /// Only available on `libclang` 4.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_4_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_getAsLongLong(result: CXEvalResult) -> c_longlong;","highlight_start":1,"highlight_end":79},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_getAsStr(result: CXEvalResult) -> *const c_char;","highlight_start":1,"highlight_end":77},{"text":"    /// Only available on `libclang` 4.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_4_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_getAsUnsigned(result: CXEvalResult) -> c_ulonglong;","highlight_start":1,"highlight_end":80},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_getKind(result: CXEvalResult) -> CXEvalResultKind;","highlight_start":1,"highlight_end":79},{"text":"    /// Only available on `libclang` 4.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_4_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_isUnsignedInt(result: CXEvalResult) -> c_uint;","highlight_start":1,"highlight_end":75},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_File_isEqual(left: CXFile, right: CXFile) -> c_int;","highlight_start":1,"highlight_end":69},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_File_tryGetRealPathName(file: CXFile) -> CXString;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_IndexAction_create(index: CXIndex) -> CXIndexAction;","highlight_start":1,"highlight_end":70},{"text":"    pub fn clang_IndexAction_dispose(index: CXIndexAction);","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_Location_isFromMainFile(location: CXSourceLocation) -> c_int;","highlight_start":1,"highlight_end":79},{"text":"    pub fn clang_Location_isInSystemHeader(location: CXSourceLocation) -> c_int;","highlight_start":1,"highlight_end":81},{"text":"    pub fn clang_Module_getASTFile(module: CXModule) -> CXFile;","highlight_start":1,"highlight_end":64},{"text":"    pub fn clang_Module_getFullName(module: CXModule) -> CXString;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_Module_getName(module: CXModule) -> CXString;","highlight_start":1,"highlight_end":63},{"text":"    pub fn clang_Module_getNumTopLevelHeaders(tu: CXTranslationUnit, module: CXModule) -> c_uint;","highlight_start":1,"highlight_end":98},{"text":"    pub fn clang_Module_getParent(module: CXModule) -> CXModule;","highlight_start":1,"highlight_end":65},{"text":"    pub fn clang_Module_getTopLevelHeader(tu: CXTranslationUnit, module: CXModule, index: c_uint) -> CXFile;","highlight_start":1,"highlight_end":109},{"text":"    pub fn clang_Module_isSystem(module: CXModule) -> c_int;","highlight_start":1,"highlight_end":61},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_PrintingPolicy_dispose(policy: CXPrintingPolicy);","highlight_start":1,"highlight_end":67},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_PrintingPolicy_getProperty(policy: CXPrintingPolicy, property: CXPrintingPolicyProperty) -> c_uint;","highlight_start":1,"highlight_end":117},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_PrintingPolicy_setProperty(policy: CXPrintingPolicy, property: CXPrintingPolicyProperty, value: c_uint);","highlight_start":1,"highlight_end":122},{"text":"    pub fn clang_Range_isNull(range: CXSourceRange) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_TargetInfo_dispose(info: CXTargetInfo);","highlight_start":1,"highlight_end":57},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_TargetInfo_getPointerWidth(info: CXTargetInfo) -> c_int;","highlight_start":1,"highlight_end":74},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_TargetInfo_getTriple(info: CXTargetInfo) -> CXString;","highlight_start":1,"highlight_end":71},{"text":"    pub fn clang_Type_getAlignOf(type_: CXType) -> c_longlong;","highlight_start":1,"highlight_end":63},{"text":"    pub fn clang_Type_getCXXRefQualifier(type_: CXType) -> CXRefQualifierKind;","highlight_start":1,"highlight_end":79},{"text":"    pub fn clang_Type_getClassType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":61},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getModifiedType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":64},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getNamedType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":61},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getNullability(type_: CXType) -> CXTypeNullabilityKind;","highlight_start":1,"highlight_end":78},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getNumObjCProtocolRefs(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":71},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getNumObjCTypeArgs(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_Type_getNumTemplateArguments(type_: CXType) -> c_int;","highlight_start":1,"highlight_end":71},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getObjCEncoding(type_: CXType) -> CXString;","highlight_start":1,"highlight_end":66},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getObjCObjectBaseType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":70},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getObjCProtocolDecl(type_: CXType, index: c_uint) -> CXCursor;","highlight_start":1,"highlight_end":85},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getObjCTypeArg(type_: CXType, index: c_uint) -> CXType;","highlight_start":1,"highlight_end":78},{"text":"    pub fn clang_Type_getOffsetOf(type_: CXType, field: *const c_char) -> c_longlong;","highlight_start":1,"highlight_end":86},{"text":"    pub fn clang_Type_getSizeOf(type_: CXType) -> c_longlong;","highlight_start":1,"highlight_end":62},{"text":"    pub fn clang_Type_getTemplateArgumentAsType(type_: CXType, index: c_uint) -> CXType;","highlight_start":1,"highlight_end":89},{"text":"    /// Only available on `libclang` 11.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_11_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_Type_getValueType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":61},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_isTransparentTagTypedef(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":72},{"text":"    /// Only available on `libclang` 3.7 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_7\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_visitFields(type_: CXType, visitor: CXFieldVisitor, data: CXClientData) -> CXVisitorResult;","highlight_start":1,"highlight_end":114},{"text":"    pub fn clang_annotateTokens(tu: CXTranslationUnit, tokens: *mut CXToken, n_tokens: c_uint, cursors: *mut CXCursor);","highlight_start":1,"highlight_end":120},{"text":"    pub fn clang_codeCompleteAt(tu: CXTranslationUnit, file: *const c_char, line: c_uint, column: c_uint, unsaved: *mut CXUnsavedFile, n_unsaved: c_uint, flags: CXCodeComplete_Flags) -> *mut CXCodeCompleteResults;","highlight_start":1,"highlight_end":214},{"text":"    pub fn clang_codeCompleteGetContainerKind(results: *mut CXCodeCompleteResults, incomplete: *mut c_uint) -> CXCursorKind;","highlight_start":1,"highlight_end":125},{"text":"    pub fn clang_codeCompleteGetContainerUSR(results: *mut CXCodeCompleteResults) -> CXString;","highlight_start":1,"highlight_end":95},{"text":"    pub fn clang_codeCompleteGetContexts(results: *mut CXCodeCompleteResults) -> c_ulonglong;","highlight_start":1,"highlight_end":94},{"text":"    pub fn clang_codeCompleteGetDiagnostic(results: *mut CXCodeCompleteResults, index: c_uint) -> CXDiagnostic;","highlight_start":1,"highlight_end":112},{"text":"    pub fn clang_codeCompleteGetNumDiagnostics(results: *mut CXCodeCompleteResults) -> c_uint;","highlight_start":1,"highlight_end":95},{"text":"    pub fn clang_codeCompleteGetObjCSelector(results: *mut CXCodeCompleteResults) -> CXString;","highlight_start":1,"highlight_end":95},{"text":"    pub fn clang_constructUSR_ObjCCategory(class: *const c_char, category: *const c_char) -> CXString;","highlight_start":1,"highlight_end":103},{"text":"    pub fn clang_constructUSR_ObjCClass(class: *const c_char) -> CXString;","highlight_start":1,"highlight_end":75},{"text":"    pub fn clang_constructUSR_ObjCIvar(name: *const c_char, usr: CXString) -> CXString;","highlight_start":1,"highlight_end":88},{"text":"    pub fn clang_constructUSR_ObjCMethod(name: *const c_char, instance: c_uint, usr: CXString) -> CXString;","highlight_start":1,"highlight_end":108},{"text":"    pub fn clang_constructUSR_ObjCProperty(property: *const c_char, usr: CXString) -> CXString;","highlight_start":1,"highlight_end":96},{"text":"    pub fn clang_constructUSR_ObjCProtocol(protocol: *const c_char) -> CXString;","highlight_start":1,"highlight_end":81},{"text":"    pub fn clang_createCXCursorSet() -> CXCursorSet;","highlight_start":1,"highlight_end":53},{"text":"    pub fn clang_createIndex(exclude: c_int, display: c_int) -> CXIndex;","highlight_start":1,"highlight_end":73},{"text":"    /// Only available on `libclang` 17.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_17_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_createIndexWithOptions(options: CXIndexOptions) -> CXIndex;","highlight_start":1,"highlight_end":77},{"text":"    pub fn clang_createTranslationUnit(index: CXIndex, file: *const c_char) -> CXTranslationUnit;","highlight_start":1,"highlight_end":98},{"text":"    pub fn clang_createTranslationUnit2(index: CXIndex, file: *const c_char, tu: *mut CXTranslationUnit) -> CXErrorCode;","highlight_start":1,"highlight_end":121},{"text":"    pub fn clang_createTranslationUnitFromSourceFile(index: CXIndex, file: *const c_char, n_arguments: c_int, arguments: *const *const c_char, n_unsaved: c_uint, unsaved: *mut CXUnsavedFile) -> CXTranslationUnit;","highlight_start":1,"highlight_end":213},{"text":"    pub fn clang_defaultCodeCompleteOptions() -> CXCodeComplete_Flags;","highlight_start":1,"highlight_end":71},{"text":"    pub fn clang_defaultDiagnosticDisplayOptions() -> CXDiagnosticDisplayOptions;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_defaultEditingTranslationUnitOptions() -> CXTranslationUnit_Flags;","highlight_start":1,"highlight_end":84},{"text":"    pub fn clang_defaultReparseOptions(tu: CXTranslationUnit) -> CXReparse_Flags;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_defaultSaveOptions(tu: CXTranslationUnit) -> CXSaveTranslationUnit_Flags;","highlight_start":1,"highlight_end":91},{"text":"    pub fn clang_disposeCXCursorSet(set: CXCursorSet);","highlight_start":1,"highlight_end":55},{"text":"    pub fn clang_disposeCXPlatformAvailability(availability: *mut CXPlatformAvailability);","highlight_start":1,"highlight_end":91},{"text":"    pub fn clang_disposeCXTUResourceUsage(usage: CXTUResourceUsage);","highlight_start":1,"highlight_end":69},{"text":"    pub fn clang_disposeCodeCompleteResults(results: *mut CXCodeCompleteResults);","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_disposeDiagnostic(diagnostic: CXDiagnostic);","highlight_start":1,"highlight_end":62},{"text":"    pub fn clang_disposeDiagnosticSet(diagnostic: CXDiagnosticSet);","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_disposeIndex(index: CXIndex);","highlight_start":1,"highlight_end":47},{"text":"    pub fn clang_disposeOverriddenCursors(cursors: *mut CXCursor);","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_disposeSourceRangeList(list: *mut CXSourceRangeList);","highlight_start":1,"highlight_end":71},{"text":"    pub fn clang_disposeString(string: CXString);","highlight_start":1,"highlight_end":50},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_disposeStringSet(set: *mut CXStringSet);","highlight_start":1,"highlight_end":58},{"text":"    pub fn clang_disposeTokens(tu: CXTranslationUnit, tokens: *mut CXToken, n_tokens: c_uint);","highlight_start":1,"highlight_end":95},{"text":"    pub fn clang_disposeTranslationUnit(tu: CXTranslationUnit);","highlight_start":1,"highlight_end":64},{"text":"    pub fn clang_enableStackTraces();","highlight_start":1,"highlight_end":38},{"text":"    pub fn clang_equalCursors(left: CXCursor, right: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":74},{"text":"    pub fn clang_equalLocations(left: CXSourceLocation, right: CXSourceLocation) -> c_uint;","highlight_start":1,"highlight_end":92},{"text":"    pub fn clang_equalRanges(left: CXSourceRange, right: CXSourceRange) -> c_uint;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_equalTypes(left: CXType, right: CXType) -> c_uint;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_executeOnThread(function: extern fn(*mut c_void), data: *mut c_void, stack: c_uint);","highlight_start":1,"highlight_end":102},{"text":"    pub fn clang_findIncludesInFile(tu: CXTranslationUnit, file: CXFile, cursor: CXCursorAndRangeVisitor) -> CXResult;","highlight_start":1,"highlight_end":119},{"text":"    pub fn clang_findReferencesInFile(cursor: CXCursor, file: CXFile, visitor: CXCursorAndRangeVisitor) -> CXResult;","highlight_start":1,"highlight_end":117},{"text":"    pub fn clang_formatDiagnostic(diagnostic: CXDiagnostic, flags: CXDiagnosticDisplayOptions) -> CXString;","highlight_start":1,"highlight_end":108},{"text":"    /// Only available on `libclang` 3.7 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_7\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_free(buffer: *mut c_void);","highlight_start":1,"highlight_end":44},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getAddressSpace(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":59},{"text":"    /// Only available on `libclang` 4.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_4_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getAllSkippedRanges(tu: CXTranslationUnit) -> *mut CXSourceRangeList;","highlight_start":1,"highlight_end":87},{"text":"    pub fn clang_getArgType(type_: CXType, index: c_uint) -> CXType;","highlight_start":1,"highlight_end":69},{"text":"    pub fn clang_getArrayElementType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":63},{"text":"    pub fn clang_getArraySize(type_: CXType) -> c_longlong;","highlight_start":1,"highlight_end":60},{"text":"    /// Only available on `libclang` 17.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_17_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_getBinaryOperatorKindSpelling(kind: CXBinaryOperatorKind) -> CXString;","highlight_start":1,"highlight_end":88},{"text":"    pub fn clang_getCString(string: CXString) -> *const c_char;","highlight_start":1,"highlight_end":64},{"text":"    pub fn clang_getCXTUResourceUsage(tu: CXTranslationUnit) -> CXTUResourceUsage;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_getCXXAccessSpecifier(cursor: CXCursor) -> CX_CXXAccessSpecifier;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_getCanonicalCursor(cursor: CXCursor) -> CXCursor;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_getCanonicalType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_getChildDiagnostics(diagnostic: CXDiagnostic) -> CXDiagnosticSet;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_getClangVersion() -> CXString;","highlight_start":1,"highlight_end":48},{"text":"    pub fn clang_getCompletionAnnotation(string: CXCompletionString, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":97},{"text":"    pub fn clang_getCompletionAvailability(string: CXCompletionString) -> CXAvailabilityKind;","highlight_start":1,"highlight_end":94},{"text":"    pub fn clang_getCompletionBriefComment(string: CXCompletionString) -> CXString;","highlight_start":1,"highlight_end":84},{"text":"    pub fn clang_getCompletionChunkCompletionString(string: CXCompletionString, index: c_uint) -> CXCompletionString;","highlight_start":1,"highlight_end":118},{"text":"    pub fn clang_getCompletionChunkKind(string: CXCompletionString, index: c_uint) -> CXCompletionChunkKind;","highlight_start":1,"highlight_end":109},{"text":"    pub fn clang_getCompletionChunkText(string: CXCompletionString, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":96},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getCompletionFixIt(results: *mut CXCodeCompleteResults, completion_index: c_uint, fixit_index: c_uint, range: *mut CXSourceRange) -> CXString;","highlight_start":1,"highlight_end":160},{"text":"    pub fn clang_getCompletionNumAnnotations(string: CXCompletionString) -> c_uint;","highlight_start":1,"highlight_end":84},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getCompletionNumFixIts(results: *mut CXCodeCompleteResults, completion_index: c_uint) -> c_uint;","highlight_start":1,"highlight_end":114},{"text":"    pub fn clang_getCompletionParent(string: CXCompletionString, kind: *mut CXCursorKind) -> CXString;","highlight_start":1,"highlight_end":103},{"text":"    pub fn clang_getCompletionPriority(string: CXCompletionString) -> c_uint;","highlight_start":1,"highlight_end":78},{"text":"    pub fn clang_getCursor(tu: CXTranslationUnit, location: CXSourceLocation) -> CXCursor;","highlight_start":1,"highlight_end":91},{"text":"    pub fn clang_getCursorAvailability(cursor: CXCursor) -> CXAvailabilityKind;","highlight_start":1,"highlight_end":80},{"text":"    /// Only available on `libclang` 17.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_17_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_getCursorBinaryOperatorKind(cursor: CXCursor) -> CXBinaryOperatorKind;","highlight_start":1,"highlight_end":88},{"text":"    pub fn clang_getCursorCompletionString(cursor: CXCursor) -> CXCompletionString;","highlight_start":1,"highlight_end":84},{"text":"    pub fn clang_getCursorDefinition(cursor: CXCursor) -> CXCursor;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_getCursorDisplayName(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":69},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getCursorExceptionSpecificationType(cursor: CXCursor) -> CXCursor_ExceptionSpecificationKind;","highlight_start":1,"highlight_end":111},{"text":"    pub fn clang_getCursorExtent(cursor: CXCursor) -> CXSourceRange;","highlight_start":1,"highlight_end":69},{"text":"    pub fn clang_getCursorKind(cursor: CXCursor) -> CXCursorKind;","highlight_start":1,"highlight_end":66},{"text":"    pub fn clang_getCursorKindSpelling(kind: CXCursorKind) -> CXString;","highlight_start":1,"highlight_end":72},{"text":"    pub fn clang_getCursorLanguage(cursor: CXCursor) -> CXLanguageKind;","highlight_start":1,"highlight_end":72},{"text":"    pub fn clang_getCursorLexicalParent(cursor: CXCursor) -> CXCursor;","highlight_start":1,"highlight_end":71},{"text":"    pub fn clang_getCursorLinkage(cursor: CXCursor) -> CXLinkageKind;","highlight_start":1,"highlight_end":70},{"text":"    pub fn clang_getCursorLocation(cursor: CXCursor) -> CXSourceLocation;","highlight_start":1,"highlight_end":74},{"text":"    pub fn clang_getCursorPlatformAvailability(cursor: CXCursor, deprecated: *mut c_int, deprecated_message: *mut CXString, unavailable: *mut c_int, unavailable_message: *mut CXString, availability: *mut CXPlatformAvailability, n_availability: c_int) -> c_int;","highlight_start":1,"highlight_end":261},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getCursorPrettyPrinted(cursor: CXCursor, policy: CXPrintingPolicy) -> CXString;","highlight_start":1,"highlight_end":97},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getCursorPrintingPolicy(cursor: CXCursor) -> CXPrintingPolicy;","highlight_start":1,"highlight_end":80},{"text":"    pub fn clang_getCursorReferenceNameRange(cursor: CXCursor, flags: CXNameRefFlags, index: c_uint) -> CXSourceRange;","highlight_start":1,"highlight_end":119},{"text":"    pub fn clang_getCursorReferenced(cursor: CXCursor) -> CXCursor;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_getCursorResultType(cursor: CXCursor) -> CXType;","highlight_start":1,"highlight_end":66},{"text":"    pub fn clang_getCursorSemanticParent(cursor: CXCursor) -> CXCursor;","highlight_start":1,"highlight_end":72},{"text":"    pub fn clang_getCursorSpelling(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":66},{"text":"    /// Only available on `libclang` 6.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_6_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getCursorTLSKind(cursor: CXCursor) -> CXTLSKind;","highlight_start":1,"highlight_end":66},{"text":"    pub fn clang_getCursorType(cursor: CXCursor) -> CXType;","highlight_start":1,"highlight_end":60},{"text":"    /// Only available on `libclang` 17.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_17_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_getCursorUnaryOperatorKind(cursor: CXCursor) -> CXUnaryOperatorKind;","highlight_start":1,"highlight_end":86},{"text":"    pub fn clang_getCursorUSR(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":61},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getCursorVisibility(cursor: CXCursor) -> CXVisibilityKind;","highlight_start":1,"highlight_end":76},{"text":"    pub fn clang_getDeclObjCTypeEncoding(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":72},{"text":"    pub fn clang_getDefinitionSpellingAndExtent(cursor: CXCursor, start: *mut *const c_char, end: *mut *const c_char, start_line: *mut c_uint, start_column: *mut c_uint, end_line: *mut c_uint, end_column: *mut c_uint);","highlight_start":1,"highlight_end":219},{"text":"    pub fn clang_getDiagnostic(tu: CXTranslationUnit, index: c_uint) -> CXDiagnostic;","highlight_start":1,"highlight_end":86},{"text":"    pub fn clang_getDiagnosticCategory(diagnostic: CXDiagnostic) -> c_uint;","highlight_start":1,"highlight_end":76},{"text":"    pub fn clang_getDiagnosticCategoryName(category: c_uint) -> CXString;","highlight_start":1,"highlight_end":74},{"text":"    pub fn clang_getDiagnosticCategoryText(diagnostic: CXDiagnostic) -> CXString;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_getDiagnosticFixIt(diagnostic: CXDiagnostic, index: c_uint, range: *mut CXSourceRange) -> CXString;","highlight_start":1,"highlight_end":117},{"text":"    pub fn clang_getDiagnosticInSet(diagnostic: CXDiagnosticSet, index: c_uint) -> CXDiagnostic;","highlight_start":1,"highlight_end":97},{"text":"    pub fn clang_getDiagnosticLocation(diagnostic: CXDiagnostic) -> CXSourceLocation;","highlight_start":1,"highlight_end":86},{"text":"    pub fn clang_getDiagnosticNumFixIts(diagnostic: CXDiagnostic) -> c_uint;","highlight_start":1,"highlight_end":77},{"text":"    pub fn clang_getDiagnosticNumRanges(diagnostic: CXDiagnostic) -> c_uint;","highlight_start":1,"highlight_end":77},{"text":"    pub fn clang_getDiagnosticOption(diagnostic: CXDiagnostic, option: *mut CXString) -> CXString;","highlight_start":1,"highlight_end":99},{"text":"    pub fn clang_getDiagnosticRange(diagnostic: CXDiagnostic, index: c_uint) -> CXSourceRange;","highlight_start":1,"highlight_end":95},{"text":"    pub fn clang_getDiagnosticSetFromTU(tu: CXTranslationUnit) -> CXDiagnosticSet;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_getDiagnosticSeverity(diagnostic: CXDiagnostic) -> CXDiagnosticSeverity;","highlight_start":1,"highlight_end":90},{"text":"    pub fn clang_getDiagnosticSpelling(diagnostic: CXDiagnostic) -> CXString;","highlight_start":1,"highlight_end":78},{"text":"    pub fn clang_getElementType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":58},{"text":"    pub fn clang_getEnumConstantDeclUnsignedValue(cursor: CXCursor) -> c_ulonglong;","highlight_start":1,"highlight_end":84},{"text":"    pub fn clang_getEnumConstantDeclValue(cursor: CXCursor) -> c_longlong;","highlight_start":1,"highlight_end":75},{"text":"    pub fn clang_getEnumDeclIntegerType(cursor: CXCursor) -> CXType;","highlight_start":1,"highlight_end":69},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getExceptionSpecificationType(type_: CXType) -> CXCursor_ExceptionSpecificationKind;","highlight_start":1,"highlight_end":102},{"text":"    pub fn clang_getExpansionLocation(location: CXSourceLocation, file: *mut CXFile, line: *mut c_uint, column: *mut c_uint, offset: *mut c_uint);","highlight_start":1,"highlight_end":147},{"text":"    pub fn clang_getFieldDeclBitWidth(cursor: CXCursor) -> c_int;","highlight_start":1,"highlight_end":66},{"text":"    pub fn clang_getFile(tu: CXTranslationUnit, file: *const c_char) -> CXFile;","highlight_start":1,"highlight_end":80},{"text":"    /// Only available on `libclang` 6.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_6_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getFileContents(tu: CXTranslationUnit, file: CXFile, size: *mut size_t) -> *const c_char;","highlight_start":1,"highlight_end":107},{"text":"    pub fn clang_getFileLocation(location: CXSourceLocation, file: *mut CXFile, line: *mut c_uint, column: *mut c_uint, offset: *mut c_uint);","highlight_start":1,"highlight_end":142},{"text":"    pub fn clang_getFileName(file: CXFile) -> CXString;","highlight_start":1,"highlight_end":56},{"text":"    pub fn clang_getFileTime(file: CXFile) -> time_t;","highlight_start":1,"highlight_end":54},{"text":"    pub fn clang_getFileUniqueID(file: CXFile, id: *mut CXFileUniqueID) -> c_int;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_getFunctionTypeCallingConv(type_: CXType) -> CXCallingConv;","highlight_start":1,"highlight_end":77},{"text":"    pub fn clang_getIBOutletCollectionType(cursor: CXCursor) -> CXType;","highlight_start":1,"highlight_end":72},{"text":"    pub fn clang_getIncludedFile(cursor: CXCursor) -> CXFile;","highlight_start":1,"highlight_end":62},{"text":"    pub fn clang_getInclusions(tu: CXTranslationUnit, visitor: CXInclusionVisitor, data: CXClientData);","highlight_start":1,"highlight_end":104},{"text":"    pub fn clang_getInstantiationLocation(location: CXSourceLocation, file: *mut CXFile, line: *mut c_uint, column: *mut c_uint, offset: *mut c_uint);","highlight_start":1,"highlight_end":151},{"text":"    pub fn clang_getLocation(tu: CXTranslationUnit, file: CXFile, line: c_uint, column: c_uint) -> CXSourceLocation;","highlight_start":1,"highlight_end":117},{"text":"    pub fn clang_getLocationForOffset(tu: CXTranslationUnit, file: CXFile, offset: c_uint) -> CXSourceLocation;","highlight_start":1,"highlight_end":112},{"text":"    pub fn clang_getModuleForFile(tu: CXTranslationUnit, file: CXFile) -> CXModule;","highlight_start":1,"highlight_end":84},{"text":"    /// Only available on `libclang` 16.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_16_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_getNonReferenceType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":63},{"text":"    pub fn clang_getNullCursor() -> CXCursor;","highlight_start":1,"highlight_end":46},{"text":"    pub fn clang_getNullLocation() -> CXSourceLocation;","highlight_start":1,"highlight_end":56},{"text":"    pub fn clang_getNullRange() -> CXSourceRange;","highlight_start":1,"highlight_end":50},{"text":"    pub fn clang_getNumArgTypes(type_: CXType) -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    pub fn clang_getNumCompletionChunks(string: CXCompletionString) -> c_uint;","highlight_start":1,"highlight_end":79},{"text":"    pub fn clang_getNumDiagnostics(tu: CXTranslationUnit) -> c_uint;","highlight_start":1,"highlight_end":69},{"text":"    pub fn clang_getNumDiagnosticsInSet(diagnostic: CXDiagnosticSet) -> c_uint;","highlight_start":1,"highlight_end":80},{"text":"    pub fn clang_getNumElements(type_: CXType) -> c_longlong;","highlight_start":1,"highlight_end":62},{"text":"    pub fn clang_getNumOverloadedDecls(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_getOverloadedDecl(cursor: CXCursor, index: c_uint) -> CXCursor;","highlight_start":1,"highlight_end":81},{"text":"    pub fn clang_getOverriddenCursors(cursor: CXCursor, cursors: *mut *mut CXCursor, n_cursors: *mut c_uint);","highlight_start":1,"highlight_end":110},{"text":"    pub fn clang_getPointeeType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":58},{"text":"    pub fn clang_getPresumedLocation(location: CXSourceLocation, file: *mut CXString, line: *mut c_uint, column: *mut c_uint);","highlight_start":1,"highlight_end":127},{"text":"    pub fn clang_getRange(start: CXSourceLocation, end: CXSourceLocation) -> CXSourceRange;","highlight_start":1,"highlight_end":92},{"text":"    pub fn clang_getRangeEnd(range: CXSourceRange) -> CXSourceLocation;","highlight_start":1,"highlight_end":72},{"text":"    pub fn clang_getRangeStart(range: CXSourceRange) -> CXSourceLocation;","highlight_start":1,"highlight_end":74},{"text":"    pub fn clang_getRemappings(file: *const c_char) -> CXRemapping;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_getRemappingsFromFileList(files: *mut *const c_char, n_files: c_uint) -> CXRemapping;","highlight_start":1,"highlight_end":103},{"text":"    pub fn clang_getResultType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":57},{"text":"    pub fn clang_getSkippedRanges(tu: CXTranslationUnit, file: CXFile) -> *mut CXSourceRangeList;","highlight_start":1,"highlight_end":98},{"text":"    pub fn clang_getSpecializedCursorTemplate(cursor: CXCursor) -> CXCursor;","highlight_start":1,"highlight_end":77},{"text":"    pub fn clang_getSpellingLocation(location: CXSourceLocation, file: *mut CXFile, line: *mut c_uint, column: *mut c_uint, offset: *mut c_uint);","highlight_start":1,"highlight_end":146},{"text":"    pub fn clang_getTUResourceUsageName(kind: CXTUResourceUsageKind) -> *const c_char;","highlight_start":1,"highlight_end":87},{"text":"    pub fn clang_getTemplateCursorKind(cursor: CXCursor) -> CXCursorKind;","highlight_start":1,"highlight_end":74},{"text":"    pub fn clang_getToken(tu: CXTranslationUnit, location: CXSourceLocation) -> *mut CXToken;","highlight_start":1,"highlight_end":94},{"text":"    pub fn clang_getTokenExtent(tu: CXTranslationUnit, token: CXToken) -> CXSourceRange;","highlight_start":1,"highlight_end":89},{"text":"    pub fn clang_getTokenKind(token: CXToken) -> CXTokenKind;","highlight_start":1,"highlight_end":62},{"text":"    pub fn clang_getTokenLocation(tu: CXTranslationUnit, token: CXToken) -> CXSourceLocation;","highlight_start":1,"highlight_end":94},{"text":"    pub fn clang_getTokenSpelling(tu: CXTranslationUnit, token: CXToken) -> CXString;","highlight_start":1,"highlight_end":86},{"text":"    pub fn clang_getTranslationUnitCursor(tu: CXTranslationUnit) -> CXCursor;","highlight_start":1,"highlight_end":78},{"text":"    pub fn clang_getTranslationUnitSpelling(tu: CXTranslationUnit) -> CXString;","highlight_start":1,"highlight_end":80},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getTranslationUnitTargetInfo(tu: CXTranslationUnit) -> CXTargetInfo;","highlight_start":1,"highlight_end":86},{"text":"    /// Only available on `libclang` 17.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_17_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_getUnaryOperatorKindSpelling(kind: CXUnaryOperatorKind) -> CXString;","highlight_start":1,"highlight_end":86},{"text":"    /// Only available on `libclang` 16.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_16_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_getUnqualifiedType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":62},{"text":"    pub fn clang_getTypeDeclaration(type_: CXType) -> CXCursor;","highlight_start":1,"highlight_end":64},{"text":"    pub fn clang_getTypeKindSpelling(type_: CXTypeKind) -> CXString;","highlight_start":1,"highlight_end":69},{"text":"    pub fn clang_getTypeSpelling(type_: CXType) -> CXString;","highlight_start":1,"highlight_end":61},{"text":"    pub fn clang_getTypedefDeclUnderlyingType(cursor: CXCursor) -> CXType;","highlight_start":1,"highlight_end":75},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getTypedefName(type_: CXType) -> CXString;","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_hashCursor(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":57},{"text":"    pub fn clang_indexLoc_getCXSourceLocation(location: CXIdxLoc) -> CXSourceLocation;","highlight_start":1,"highlight_end":87},{"text":"    pub fn clang_indexLoc_getFileLocation(location: CXIdxLoc, index_file: *mut CXIdxClientFile, file: *mut CXFile, line: *mut c_uint, column: *mut c_uint, offset: *mut c_uint);","highlight_start":1,"highlight_end":177},{"text":"    pub fn clang_indexSourceFile(index: CXIndexAction, data: CXClientData, callbacks: *mut IndexerCallbacks, n_callbacks: c_uint, index_flags: CXIndexOptFlags, file: *const c_char, arguments: *const *const c_char, n_arguments: c_int, unsaved: *mut CXUnsavedFile, n_unsaved: c_uint, tu: *mut CXTranslationUnit, tu_flags: CXTranslationUnit_Flags) -> CXErrorCode;","highlight_start":1,"highlight_end":361},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_indexSourceFileFullArgv(index: CXIndexAction, data: CXClientData, callbacks: *mut IndexerCallbacks, n_callbacks: c_uint, index_flags: CXIndexOptFlags, file: *const c_char, arguments: *const *const c_char, n_arguments: c_int, unsaved: *mut CXUnsavedFile, n_unsaved: c_uint, tu: *mut CXTranslationUnit, tu_flags: CXTranslationUnit_Flags) -> CXErrorCode;","highlight_start":1,"highlight_end":369},{"text":"    pub fn clang_indexTranslationUnit(index: CXIndexAction, data: CXClientData, callbacks: *mut IndexerCallbacks, n_callbacks: c_uint, flags: CXIndexOptFlags, tu: CXTranslationUnit) -> c_int;","highlight_start":1,"highlight_end":192},{"text":"    pub fn clang_index_getCXXClassDeclInfo(info: *const CXIdxDeclInfo) -> *const CXIdxCXXClassDeclInfo;","highlight_start":1,"highlight_end":104},{"text":"    pub fn clang_index_getClientContainer(info: *const CXIdxContainerInfo) -> CXIdxClientContainer;","highlight_start":1,"highlight_end":100},{"text":"    pub fn clang_index_getClientEntity(info: *const CXIdxEntityInfo) -> CXIdxClientEntity;","highlight_start":1,"highlight_end":91},{"text":"    pub fn clang_index_getIBOutletCollectionAttrInfo(info: *const CXIdxAttrInfo) -> *const CXIdxIBOutletCollectionAttrInfo;","highlight_start":1,"highlight_end":124},{"text":"    pub fn clang_index_getObjCCategoryDeclInfo(info: *const CXIdxDeclInfo) -> *const CXIdxObjCCategoryDeclInfo;","highlight_start":1,"highlight_end":112},{"text":"    pub fn clang_index_getObjCContainerDeclInfo(info: *const CXIdxDeclInfo) -> *const CXIdxObjCContainerDeclInfo;","highlight_start":1,"highlight_end":114},{"text":"    pub fn clang_index_getObjCInterfaceDeclInfo(info: *const CXIdxDeclInfo) -> *const CXIdxObjCInterfaceDeclInfo;","highlight_start":1,"highlight_end":114},{"text":"    pub fn clang_index_getObjCPropertyDeclInfo(info: *const CXIdxDeclInfo) -> *const CXIdxObjCPropertyDeclInfo;","highlight_start":1,"highlight_end":112},{"text":"    pub fn clang_index_getObjCProtocolRefListInfo(info: *const CXIdxDeclInfo) -> *const CXIdxObjCProtocolRefListInfo;","highlight_start":1,"highlight_end":118},{"text":"    pub fn clang_index_isEntityObjCContainerKind(info: CXIdxEntityKind) -> c_int;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_index_setClientContainer(info: *const CXIdxContainerInfo, container: CXIdxClientContainer);","highlight_start":1,"highlight_end":109},{"text":"    pub fn clang_index_setClientEntity(info: *const CXIdxEntityInfo, entity: CXIdxClientEntity);","highlight_start":1,"highlight_end":97},{"text":"    pub fn clang_isAttribute(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_isConstQualifiedType(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":64},{"text":"    pub fn clang_isCursorDefinition(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":65},{"text":"    pub fn clang_isDeclaration(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":62},{"text":"    pub fn clang_isExpression(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":61},{"text":"    pub fn clang_isFileMultipleIncludeGuarded(tu: CXTranslationUnit, file: CXFile) -> c_uint;","highlight_start":1,"highlight_end":94},{"text":"    pub fn clang_isFunctionTypeVariadic(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":66},{"text":"    pub fn clang_isInvalid(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":58},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_isInvalidDeclaration(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_isPODType(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":53},{"text":"    pub fn clang_isPreprocessing(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":64},{"text":"    pub fn clang_isReference(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_isRestrictQualifiedType(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_isStatement(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_isTranslationUnit(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":66},{"text":"    pub fn clang_isUnexposed(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_isVirtualBase(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_isVolatileQualifiedType(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_loadDiagnostics(file: *const c_char, error: *mut CXLoadDiag_Error, message: *mut CXString) -> CXDiagnosticSet;","highlight_start":1,"highlight_end":128},{"text":"    pub fn clang_parseTranslationUnit(index: CXIndex, file: *const c_char, arguments: *const *const c_char, n_arguments: c_int, unsaved: *mut CXUnsavedFile, n_unsaved: c_uint, flags: CXTranslationUnit_Flags) -> CXTranslationUnit;","highlight_start":1,"highlight_end":230},{"text":"    pub fn clang_parseTranslationUnit2(index: CXIndex, file: *const c_char, arguments: *const *const c_char, n_arguments: c_int, unsaved: *mut CXUnsavedFile, n_unsaved: c_uint, flags: CXTranslationUnit_Flags, tu: *mut CXTranslationUnit) -> CXErrorCode;","highlight_start":1,"highlight_end":253},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_parseTranslationUnit2FullArgv(index: CXIndex, file: *const c_char, arguments: *const *const c_char, n_arguments: c_int, unsaved: *mut CXUnsavedFile, n_unsaved: c_uint, flags: CXTranslationUnit_Flags, tu: *mut CXTranslationUnit) -> CXErrorCode;","highlight_start":1,"highlight_end":261},{"text":"    pub fn clang_remap_dispose(remapping: CXRemapping);","highlight_start":1,"highlight_end":56},{"text":"    pub fn clang_remap_getFilenames(remapping: CXRemapping, index: c_uint, original: *mut CXString, transformed: *mut CXString);","highlight_start":1,"highlight_end":129},{"text":"    pub fn clang_remap_getNumFiles(remapping: CXRemapping) -> c_uint;","highlight_start":1,"highlight_end":70},{"text":"    pub fn clang_reparseTranslationUnit(tu: CXTranslationUnit, n_unsaved: c_uint, unsaved: *mut CXUnsavedFile, flags: CXReparse_Flags) -> CXErrorCode;","highlight_start":1,"highlight_end":151},{"text":"    pub fn clang_saveTranslationUnit(tu: CXTranslationUnit, file: *const c_char, options: CXSaveTranslationUnit_Flags) -> CXSaveError;","highlight_start":1,"highlight_end":135},{"text":"    pub fn clang_sortCodeCompletionResults(results: *mut CXCompletionResult, n_results: c_uint);","highlight_start":1,"highlight_end":97},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_suspendTranslationUnit(tu: CXTranslationUnit) -> c_uint;","highlight_start":1,"highlight_end":74},{"text":"    pub fn clang_toggleCrashRecovery(recovery: c_uint);","highlight_start":1,"highlight_end":56},{"text":"    pub fn clang_tokenize(tu: CXTranslationUnit, range: CXSourceRange, tokens: *mut *mut CXToken, n_tokens: *mut c_uint);","highlight_start":1,"highlight_end":122},{"text":"    pub fn clang_visitChildren(cursor: CXCursor, visitor: CXCursorVisitor, data: CXClientData) -> c_uint;","highlight_start":1,"highlight_end":106},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Documentation","highlight_start":1,"highlight_end":21},{"text":"    pub fn clang_BlockCommandComment_getArgText(comment: CXComment, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":96},{"text":"    pub fn clang_BlockCommandComment_getCommandName(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":85},{"text":"    pub fn clang_BlockCommandComment_getNumArgs(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":79},{"text":"    pub fn clang_BlockCommandComment_getParagraph(comment: CXComment) -> CXComment;","highlight_start":1,"highlight_end":84},{"text":"    pub fn clang_Comment_getChild(comment: CXComment, index: c_uint) -> CXComment;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_Comment_getKind(comment: CXComment) -> CXCommentKind;","highlight_start":1,"highlight_end":71},{"text":"    pub fn clang_Comment_getNumChildren(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":71},{"text":"    pub fn clang_Comment_isWhitespace(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":69},{"text":"    pub fn clang_Cursor_getParsedComment(C: CXCursor) -> CXComment;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_FullComment_getAsHTML(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":72},{"text":"    pub fn clang_FullComment_getAsXML(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":71},{"text":"    pub fn clang_HTMLStartTag_getAttrName(comment: CXComment, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":90},{"text":"    pub fn clang_HTMLStartTag_getAttrValue(comment: CXComment, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":91},{"text":"    pub fn clang_HTMLStartTag_getNumAttrs(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":73},{"text":"    pub fn clang_HTMLStartTagComment_isSelfClosing(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_HTMLTagComment_getAsString(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":77},{"text":"    pub fn clang_HTMLTagComment_getTagName(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":76},{"text":"    pub fn clang_InlineCommandComment_getArgText(comment: CXComment, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":97},{"text":"    pub fn clang_InlineCommandComment_getCommandName(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":86},{"text":"    pub fn clang_InlineCommandComment_getNumArgs(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":80},{"text":"    pub fn clang_InlineCommandComment_getRenderKind(comment: CXComment) -> CXCommentInlineCommandRenderKind;","highlight_start":1,"highlight_end":109},{"text":"    pub fn clang_InlineContentComment_hasTrailingNewline(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":88},{"text":"    pub fn clang_ParamCommandComment_getDirection(comment: CXComment) -> CXCommentParamPassDirection;","highlight_start":1,"highlight_end":102},{"text":"    pub fn clang_ParamCommandComment_getParamIndex(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_ParamCommandComment_getParamName(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_ParamCommandComment_isDirectionExplicit(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":88},{"text":"    pub fn clang_ParamCommandComment_isParamIndexValid(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":86},{"text":"    pub fn clang_TextComment_getText(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":70},{"text":"    pub fn clang_TParamCommandComment_getDepth(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":78},{"text":"    pub fn clang_TParamCommandComment_getIndex(comment: CXComment, depth: c_uint) -> c_uint;","highlight_start":1,"highlight_end":93},{"text":"    pub fn clang_TParamCommandComment_getParamName(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":84},{"text":"    pub fn clang_TParamCommandComment_isParamPositionValid(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":90},{"text":"    pub fn clang_VerbatimBlockLineComment_getText(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_VerbatimLineComment_getText(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":78},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"link!","def_site_span":{"file_name":"/Users/bubu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/src/link.rs","byte_start":188,"byte_end":205,"line_start":8,"line_end":8,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! link {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected values for `feature` are: `clang_10_0`, `clang_11_0`, `clang_12_0`, `clang_13_0`, `clang_14_0`, `clang_15_0`, `clang_16_0`, `clang_17_0`, `clang_18_0`, `clang_3_5`, `clang_3_6`, `clang_3_7`, `clang_3_8`, `clang_3_9`, `clang_4_0`, `clang_5_0`, `clang_6_0`, `clang_7_0`, `clang_8_0`, `clang_9_0`, `libcpp`, `libloading`, `runtime`, and `static`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `cargo-clippy` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `cargo-clippy`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/bubu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/src/link.rs:173:24\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(feature=\"cargo-clippy\", allow(clippy::missing_safety_doc))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/bubu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/src/lib.rs:1859:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1859\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mlink! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1860\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn clang_CXCursorSet_contains(set: CXCursorSet, cursor: CXCursor) -> c_uint;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1861\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn clang_CXCursorSet_insert(set: CXCursorSet, cursor: CXCursor) -> c_uint;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1862\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn clang_CXIndex_getGlobalOptions(index: CXIndex) -> CXGlobalOptFlags;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn clang_VerbatimLineComment_getText(comment: CXComment) -> CXString;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2433\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `clang_10_0`, `clang_11_0`, `clang_12_0`, `clang_13_0`, `clang_14_0`, `clang_15_0`, `clang_16_0`, `clang_17_0`, `clang_18_0`, `clang_3_5`, `clang_3_6`, `clang_3_7`, `clang_3_8`, `clang_3_9`, `clang_4_0`, `clang_5_0`, `clang_6_0`, `clang_7_0`, `clang_8_0`, `clang_9_0`, `libcpp`, `libloading`, `runtime`, and `static`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `cargo-clippy` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `link` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `cargo-clippy`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/Users/bubu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/src/link.rs","byte_start":6511,"byte_end":6533,"line_start":174,"line_end":174,"column_start":24,"column_end":46,"is_primary":true,"text":[{"text":"            #[cfg_attr(feature=\"cargo-clippy\", allow(clippy::too_many_arguments))]","highlight_start":24,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/bubu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/src/lib.rs","byte_start":68113,"byte_end":110009,"line_start":1859,"line_end":2433,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"link! {","highlight_start":1,"highlight_end":8},{"text":"    pub fn clang_CXCursorSet_contains(set: CXCursorSet, cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":85},{"text":"    pub fn clang_CXCursorSet_insert(set: CXCursorSet, cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_CXIndex_getGlobalOptions(index: CXIndex) -> CXGlobalOptFlags;","highlight_start":1,"highlight_end":79},{"text":"    pub fn clang_CXIndex_setGlobalOptions(index: CXIndex, flags: CXGlobalOptFlags);","highlight_start":1,"highlight_end":84},{"text":"    /// Only available on `libclang` 6.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_6_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXIndex_setInvocationEmissionPathOption(index: CXIndex, path: *const c_char);","highlight_start":1,"highlight_end":95},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXXConstructor_isConvertingConstructor(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":85},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXXConstructor_isCopyConstructor(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":79},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXXConstructor_isDefaultConstructor(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":82},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXXConstructor_isMoveConstructor(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":79},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXXField_isMutable(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":65},{"text":"    pub fn clang_CXXMethod_isConst(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":64},{"text":"    /// Only available on `libclang` 16.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_16_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_CXXMethod_isCopyAssignmentOperator(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":81},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXXMethod_isDefaulted(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":68},{"text":"    /// Only available on `libclang` 16.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_16_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_CXXMethod_isDeleted(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":66},{"text":"    /// Only available on `libclang` 16.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_16_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_CXXMethod_isMoveAssignmentOperator(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":81},{"text":"    pub fn clang_CXXMethod_isPureVirtual(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":70},{"text":"    pub fn clang_CXXMethod_isStatic(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":65},{"text":"    pub fn clang_CXXMethod_isVirtual(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":66},{"text":"    /// Only available on `libclang` 17.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_17_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_CXXMethod_isExplicit(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":67},{"text":"    /// Only available on `libclang` 6.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_6_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CXXRecord_isAbstract(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_CompilationDatabase_dispose(database: CXCompilationDatabase);","highlight_start":1,"highlight_end":79},{"text":"    pub fn clang_CompilationDatabase_fromDirectory(directory: *const c_char, error: *mut CXCompilationDatabase_Error) -> CXCompilationDatabase;","highlight_start":1,"highlight_end":144},{"text":"    pub fn clang_CompilationDatabase_getAllCompileCommands(database: CXCompilationDatabase) -> CXCompileCommands;","highlight_start":1,"highlight_end":114},{"text":"    pub fn clang_CompilationDatabase_getCompileCommands(database: CXCompilationDatabase, filename: *const c_char) -> CXCompileCommands;","highlight_start":1,"highlight_end":136},{"text":"    pub fn clang_CompileCommand_getArg(command: CXCompileCommand, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":94},{"text":"    pub fn clang_CompileCommand_getDirectory(command: CXCompileCommand) -> CXString;","highlight_start":1,"highlight_end":85},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CompileCommand_getFilename(command: CXCompileCommand) -> CXString;","highlight_start":1,"highlight_end":84},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CompileCommand_getMappedSourceContent(command: CXCompileCommand, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":110},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_CompileCommand_getMappedSourcePath(command: CXCompileCommand, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":107},{"text":"    pub fn clang_CompileCommand_getNumArgs(command: CXCompileCommand) -> c_uint;","highlight_start":1,"highlight_end":81},{"text":"    pub fn clang_CompileCommand_getNumMappedSources(command: CXCompileCommand) -> c_uint;","highlight_start":1,"highlight_end":90},{"text":"    pub fn clang_CompileCommands_dispose(command: CXCompileCommands);","highlight_start":1,"highlight_end":70},{"text":"    pub fn clang_CompileCommands_getCommand(command: CXCompileCommands, index: c_uint) -> CXCompileCommand;","highlight_start":1,"highlight_end":108},{"text":"    pub fn clang_CompileCommands_getSize(command: CXCompileCommands) -> c_uint;","highlight_start":1,"highlight_end":80},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_Evaluate(cursor: CXCursor) -> CXEvalResult;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_Cursor_getArgument(cursor: CXCursor, index: c_uint) -> CXCursor;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_Cursor_getBriefCommentText(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":75},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getCXXManglings(cursor: CXCursor) -> *mut CXStringSet;","highlight_start":1,"highlight_end":79},{"text":"    pub fn clang_Cursor_getCommentRange(cursor: CXCursor) -> CXSourceRange;","highlight_start":1,"highlight_end":76},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getMangling(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_Cursor_getModule(cursor: CXCursor) -> CXModule;","highlight_start":1,"highlight_end":65},{"text":"    pub fn clang_Cursor_getNumArguments(cursor: CXCursor) -> c_int;","highlight_start":1,"highlight_end":68},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getNumTemplateArguments(cursor: CXCursor) -> c_int;","highlight_start":1,"highlight_end":76},{"text":"    pub fn clang_Cursor_getObjCDeclQualifiers(cursor: CXCursor) -> CXObjCDeclQualifierKind;","highlight_start":1,"highlight_end":92},{"text":"    /// Only available on `libclang` 6.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_6_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getObjCManglings(cursor: CXCursor) -> *mut CXStringSet;","highlight_start":1,"highlight_end":80},{"text":"    pub fn clang_Cursor_getObjCPropertyAttributes(cursor: CXCursor, reserved: c_uint) -> CXObjCPropertyAttrKind;","highlight_start":1,"highlight_end":113},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getObjCPropertyGetterName(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":81},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getObjCPropertySetterName(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":81},{"text":"    pub fn clang_Cursor_getObjCSelectorIndex(cursor: CXCursor) -> c_int;","highlight_start":1,"highlight_end":73},{"text":"    /// Only available on `libclang` 3.7 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_7\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getOffsetOfField(cursor: CXCursor) -> c_longlong;","highlight_start":1,"highlight_end":74},{"text":"    pub fn clang_Cursor_getRawCommentText(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":73},{"text":"    pub fn clang_Cursor_getReceiverType(cursor: CXCursor) -> CXType;","highlight_start":1,"highlight_end":69},{"text":"    pub fn clang_Cursor_getSpellingNameRange(cursor: CXCursor, index: c_uint, reserved: c_uint) -> CXSourceRange;","highlight_start":1,"highlight_end":114},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getStorageClass(cursor: CXCursor) -> CX_StorageClass;","highlight_start":1,"highlight_end":78},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getTemplateArgumentKind(cursor: CXCursor, index: c_uint) -> CXTemplateArgumentKind;","highlight_start":1,"highlight_end":108},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getTemplateArgumentType(cursor: CXCursor, index: c_uint) -> CXType;","highlight_start":1,"highlight_end":92},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getTemplateArgumentUnsignedValue(cursor: CXCursor, index: c_uint) -> c_ulonglong;","highlight_start":1,"highlight_end":106},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_getTemplateArgumentValue(cursor: CXCursor, index: c_uint) -> c_longlong;","highlight_start":1,"highlight_end":97},{"text":"    pub fn clang_Cursor_getTranslationUnit(cursor: CXCursor) -> CXTranslationUnit;","highlight_start":1,"highlight_end":83},{"text":"    /// Only available on `libclang` 12.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_12_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_Cursor_getVarDeclInitializer(cursor: CXCursor) -> CXCursor;","highlight_start":1,"highlight_end":77},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_hasAttrs(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":62},{"text":"    /// Only available on `libclang` 12.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_12_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_Cursor_hasVarDeclGlobalStorage(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":77},{"text":"    /// Only available on `libclang` 12.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_12_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_Cursor_hasVarDeclExternalStorage(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":79},{"text":"    /// Only available on `libclang` 3.7 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_7\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_isAnonymous(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":65},{"text":"    /// Only available on `libclang` 9.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_9_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_isAnonymousRecordDecl(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":75},{"text":"    pub fn clang_Cursor_isBitField(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":64},{"text":"    pub fn clang_Cursor_isDynamicCall(cursor: CXCursor) -> c_int;","highlight_start":1,"highlight_end":66},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_isExternalSymbol(cursor: CXCursor, language: *mut CXString, from: *mut CXString, generated: *mut c_uint) -> c_uint;","highlight_start":1,"highlight_end":140},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_isFunctionInlined(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":71},{"text":"    /// Only available on `libclang` 9.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_9_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_isInlineNamespace(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":71},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_isMacroBuiltin(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":68},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Cursor_isMacroFunctionLike(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":73},{"text":"    pub fn clang_Cursor_isNull(cursor: CXCursor) -> c_int;","highlight_start":1,"highlight_end":59},{"text":"    pub fn clang_Cursor_isObjCOptional(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_Cursor_isVariadic(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":64},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EnumDecl_isScoped(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":64},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_dispose(result: CXEvalResult);","highlight_start":1,"highlight_end":59},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_getAsDouble(result: CXEvalResult) -> libc::c_double;","highlight_start":1,"highlight_end":81},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_getAsInt(result: CXEvalResult) -> c_int;","highlight_start":1,"highlight_end":69},{"text":"    /// Only available on `libclang` 4.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_4_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_getAsLongLong(result: CXEvalResult) -> c_longlong;","highlight_start":1,"highlight_end":79},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_getAsStr(result: CXEvalResult) -> *const c_char;","highlight_start":1,"highlight_end":77},{"text":"    /// Only available on `libclang` 4.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_4_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_getAsUnsigned(result: CXEvalResult) -> c_ulonglong;","highlight_start":1,"highlight_end":80},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_getKind(result: CXEvalResult) -> CXEvalResultKind;","highlight_start":1,"highlight_end":79},{"text":"    /// Only available on `libclang` 4.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_4_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_EvalResult_isUnsignedInt(result: CXEvalResult) -> c_uint;","highlight_start":1,"highlight_end":75},{"text":"    /// Only available on `libclang` 3.6 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_6\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_File_isEqual(left: CXFile, right: CXFile) -> c_int;","highlight_start":1,"highlight_end":69},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_File_tryGetRealPathName(file: CXFile) -> CXString;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_IndexAction_create(index: CXIndex) -> CXIndexAction;","highlight_start":1,"highlight_end":70},{"text":"    pub fn clang_IndexAction_dispose(index: CXIndexAction);","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_Location_isFromMainFile(location: CXSourceLocation) -> c_int;","highlight_start":1,"highlight_end":79},{"text":"    pub fn clang_Location_isInSystemHeader(location: CXSourceLocation) -> c_int;","highlight_start":1,"highlight_end":81},{"text":"    pub fn clang_Module_getASTFile(module: CXModule) -> CXFile;","highlight_start":1,"highlight_end":64},{"text":"    pub fn clang_Module_getFullName(module: CXModule) -> CXString;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_Module_getName(module: CXModule) -> CXString;","highlight_start":1,"highlight_end":63},{"text":"    pub fn clang_Module_getNumTopLevelHeaders(tu: CXTranslationUnit, module: CXModule) -> c_uint;","highlight_start":1,"highlight_end":98},{"text":"    pub fn clang_Module_getParent(module: CXModule) -> CXModule;","highlight_start":1,"highlight_end":65},{"text":"    pub fn clang_Module_getTopLevelHeader(tu: CXTranslationUnit, module: CXModule, index: c_uint) -> CXFile;","highlight_start":1,"highlight_end":109},{"text":"    pub fn clang_Module_isSystem(module: CXModule) -> c_int;","highlight_start":1,"highlight_end":61},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_PrintingPolicy_dispose(policy: CXPrintingPolicy);","highlight_start":1,"highlight_end":67},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_PrintingPolicy_getProperty(policy: CXPrintingPolicy, property: CXPrintingPolicyProperty) -> c_uint;","highlight_start":1,"highlight_end":117},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_PrintingPolicy_setProperty(policy: CXPrintingPolicy, property: CXPrintingPolicyProperty, value: c_uint);","highlight_start":1,"highlight_end":122},{"text":"    pub fn clang_Range_isNull(range: CXSourceRange) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_TargetInfo_dispose(info: CXTargetInfo);","highlight_start":1,"highlight_end":57},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_TargetInfo_getPointerWidth(info: CXTargetInfo) -> c_int;","highlight_start":1,"highlight_end":74},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_TargetInfo_getTriple(info: CXTargetInfo) -> CXString;","highlight_start":1,"highlight_end":71},{"text":"    pub fn clang_Type_getAlignOf(type_: CXType) -> c_longlong;","highlight_start":1,"highlight_end":63},{"text":"    pub fn clang_Type_getCXXRefQualifier(type_: CXType) -> CXRefQualifierKind;","highlight_start":1,"highlight_end":79},{"text":"    pub fn clang_Type_getClassType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":61},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getModifiedType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":64},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getNamedType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":61},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getNullability(type_: CXType) -> CXTypeNullabilityKind;","highlight_start":1,"highlight_end":78},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getNumObjCProtocolRefs(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":71},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getNumObjCTypeArgs(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_Type_getNumTemplateArguments(type_: CXType) -> c_int;","highlight_start":1,"highlight_end":71},{"text":"    /// Only available on `libclang` 3.9 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_9\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getObjCEncoding(type_: CXType) -> CXString;","highlight_start":1,"highlight_end":66},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getObjCObjectBaseType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":70},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getObjCProtocolDecl(type_: CXType, index: c_uint) -> CXCursor;","highlight_start":1,"highlight_end":85},{"text":"    /// Only available on `libclang` 8.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_8_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_getObjCTypeArg(type_: CXType, index: c_uint) -> CXType;","highlight_start":1,"highlight_end":78},{"text":"    pub fn clang_Type_getOffsetOf(type_: CXType, field: *const c_char) -> c_longlong;","highlight_start":1,"highlight_end":86},{"text":"    pub fn clang_Type_getSizeOf(type_: CXType) -> c_longlong;","highlight_start":1,"highlight_end":62},{"text":"    pub fn clang_Type_getTemplateArgumentAsType(type_: CXType, index: c_uint) -> CXType;","highlight_start":1,"highlight_end":89},{"text":"    /// Only available on `libclang` 11.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_11_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_Type_getValueType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":61},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_isTransparentTagTypedef(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":72},{"text":"    /// Only available on `libclang` 3.7 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_7\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_Type_visitFields(type_: CXType, visitor: CXFieldVisitor, data: CXClientData) -> CXVisitorResult;","highlight_start":1,"highlight_end":114},{"text":"    pub fn clang_annotateTokens(tu: CXTranslationUnit, tokens: *mut CXToken, n_tokens: c_uint, cursors: *mut CXCursor);","highlight_start":1,"highlight_end":120},{"text":"    pub fn clang_codeCompleteAt(tu: CXTranslationUnit, file: *const c_char, line: c_uint, column: c_uint, unsaved: *mut CXUnsavedFile, n_unsaved: c_uint, flags: CXCodeComplete_Flags) -> *mut CXCodeCompleteResults;","highlight_start":1,"highlight_end":214},{"text":"    pub fn clang_codeCompleteGetContainerKind(results: *mut CXCodeCompleteResults, incomplete: *mut c_uint) -> CXCursorKind;","highlight_start":1,"highlight_end":125},{"text":"    pub fn clang_codeCompleteGetContainerUSR(results: *mut CXCodeCompleteResults) -> CXString;","highlight_start":1,"highlight_end":95},{"text":"    pub fn clang_codeCompleteGetContexts(results: *mut CXCodeCompleteResults) -> c_ulonglong;","highlight_start":1,"highlight_end":94},{"text":"    pub fn clang_codeCompleteGetDiagnostic(results: *mut CXCodeCompleteResults, index: c_uint) -> CXDiagnostic;","highlight_start":1,"highlight_end":112},{"text":"    pub fn clang_codeCompleteGetNumDiagnostics(results: *mut CXCodeCompleteResults) -> c_uint;","highlight_start":1,"highlight_end":95},{"text":"    pub fn clang_codeCompleteGetObjCSelector(results: *mut CXCodeCompleteResults) -> CXString;","highlight_start":1,"highlight_end":95},{"text":"    pub fn clang_constructUSR_ObjCCategory(class: *const c_char, category: *const c_char) -> CXString;","highlight_start":1,"highlight_end":103},{"text":"    pub fn clang_constructUSR_ObjCClass(class: *const c_char) -> CXString;","highlight_start":1,"highlight_end":75},{"text":"    pub fn clang_constructUSR_ObjCIvar(name: *const c_char, usr: CXString) -> CXString;","highlight_start":1,"highlight_end":88},{"text":"    pub fn clang_constructUSR_ObjCMethod(name: *const c_char, instance: c_uint, usr: CXString) -> CXString;","highlight_start":1,"highlight_end":108},{"text":"    pub fn clang_constructUSR_ObjCProperty(property: *const c_char, usr: CXString) -> CXString;","highlight_start":1,"highlight_end":96},{"text":"    pub fn clang_constructUSR_ObjCProtocol(protocol: *const c_char) -> CXString;","highlight_start":1,"highlight_end":81},{"text":"    pub fn clang_createCXCursorSet() -> CXCursorSet;","highlight_start":1,"highlight_end":53},{"text":"    pub fn clang_createIndex(exclude: c_int, display: c_int) -> CXIndex;","highlight_start":1,"highlight_end":73},{"text":"    /// Only available on `libclang` 17.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_17_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_createIndexWithOptions(options: CXIndexOptions) -> CXIndex;","highlight_start":1,"highlight_end":77},{"text":"    pub fn clang_createTranslationUnit(index: CXIndex, file: *const c_char) -> CXTranslationUnit;","highlight_start":1,"highlight_end":98},{"text":"    pub fn clang_createTranslationUnit2(index: CXIndex, file: *const c_char, tu: *mut CXTranslationUnit) -> CXErrorCode;","highlight_start":1,"highlight_end":121},{"text":"    pub fn clang_createTranslationUnitFromSourceFile(index: CXIndex, file: *const c_char, n_arguments: c_int, arguments: *const *const c_char, n_unsaved: c_uint, unsaved: *mut CXUnsavedFile) -> CXTranslationUnit;","highlight_start":1,"highlight_end":213},{"text":"    pub fn clang_defaultCodeCompleteOptions() -> CXCodeComplete_Flags;","highlight_start":1,"highlight_end":71},{"text":"    pub fn clang_defaultDiagnosticDisplayOptions() -> CXDiagnosticDisplayOptions;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_defaultEditingTranslationUnitOptions() -> CXTranslationUnit_Flags;","highlight_start":1,"highlight_end":84},{"text":"    pub fn clang_defaultReparseOptions(tu: CXTranslationUnit) -> CXReparse_Flags;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_defaultSaveOptions(tu: CXTranslationUnit) -> CXSaveTranslationUnit_Flags;","highlight_start":1,"highlight_end":91},{"text":"    pub fn clang_disposeCXCursorSet(set: CXCursorSet);","highlight_start":1,"highlight_end":55},{"text":"    pub fn clang_disposeCXPlatformAvailability(availability: *mut CXPlatformAvailability);","highlight_start":1,"highlight_end":91},{"text":"    pub fn clang_disposeCXTUResourceUsage(usage: CXTUResourceUsage);","highlight_start":1,"highlight_end":69},{"text":"    pub fn clang_disposeCodeCompleteResults(results: *mut CXCodeCompleteResults);","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_disposeDiagnostic(diagnostic: CXDiagnostic);","highlight_start":1,"highlight_end":62},{"text":"    pub fn clang_disposeDiagnosticSet(diagnostic: CXDiagnosticSet);","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_disposeIndex(index: CXIndex);","highlight_start":1,"highlight_end":47},{"text":"    pub fn clang_disposeOverriddenCursors(cursors: *mut CXCursor);","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_disposeSourceRangeList(list: *mut CXSourceRangeList);","highlight_start":1,"highlight_end":71},{"text":"    pub fn clang_disposeString(string: CXString);","highlight_start":1,"highlight_end":50},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_disposeStringSet(set: *mut CXStringSet);","highlight_start":1,"highlight_end":58},{"text":"    pub fn clang_disposeTokens(tu: CXTranslationUnit, tokens: *mut CXToken, n_tokens: c_uint);","highlight_start":1,"highlight_end":95},{"text":"    pub fn clang_disposeTranslationUnit(tu: CXTranslationUnit);","highlight_start":1,"highlight_end":64},{"text":"    pub fn clang_enableStackTraces();","highlight_start":1,"highlight_end":38},{"text":"    pub fn clang_equalCursors(left: CXCursor, right: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":74},{"text":"    pub fn clang_equalLocations(left: CXSourceLocation, right: CXSourceLocation) -> c_uint;","highlight_start":1,"highlight_end":92},{"text":"    pub fn clang_equalRanges(left: CXSourceRange, right: CXSourceRange) -> c_uint;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_equalTypes(left: CXType, right: CXType) -> c_uint;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_executeOnThread(function: extern fn(*mut c_void), data: *mut c_void, stack: c_uint);","highlight_start":1,"highlight_end":102},{"text":"    pub fn clang_findIncludesInFile(tu: CXTranslationUnit, file: CXFile, cursor: CXCursorAndRangeVisitor) -> CXResult;","highlight_start":1,"highlight_end":119},{"text":"    pub fn clang_findReferencesInFile(cursor: CXCursor, file: CXFile, visitor: CXCursorAndRangeVisitor) -> CXResult;","highlight_start":1,"highlight_end":117},{"text":"    pub fn clang_formatDiagnostic(diagnostic: CXDiagnostic, flags: CXDiagnosticDisplayOptions) -> CXString;","highlight_start":1,"highlight_end":108},{"text":"    /// Only available on `libclang` 3.7 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_7\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_free(buffer: *mut c_void);","highlight_start":1,"highlight_end":44},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getAddressSpace(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":59},{"text":"    /// Only available on `libclang` 4.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_4_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getAllSkippedRanges(tu: CXTranslationUnit) -> *mut CXSourceRangeList;","highlight_start":1,"highlight_end":87},{"text":"    pub fn clang_getArgType(type_: CXType, index: c_uint) -> CXType;","highlight_start":1,"highlight_end":69},{"text":"    pub fn clang_getArrayElementType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":63},{"text":"    pub fn clang_getArraySize(type_: CXType) -> c_longlong;","highlight_start":1,"highlight_end":60},{"text":"    /// Only available on `libclang` 17.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_17_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_getBinaryOperatorKindSpelling(kind: CXBinaryOperatorKind) -> CXString;","highlight_start":1,"highlight_end":88},{"text":"    pub fn clang_getCString(string: CXString) -> *const c_char;","highlight_start":1,"highlight_end":64},{"text":"    pub fn clang_getCXTUResourceUsage(tu: CXTranslationUnit) -> CXTUResourceUsage;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_getCXXAccessSpecifier(cursor: CXCursor) -> CX_CXXAccessSpecifier;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_getCanonicalCursor(cursor: CXCursor) -> CXCursor;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_getCanonicalType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_getChildDiagnostics(diagnostic: CXDiagnostic) -> CXDiagnosticSet;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_getClangVersion() -> CXString;","highlight_start":1,"highlight_end":48},{"text":"    pub fn clang_getCompletionAnnotation(string: CXCompletionString, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":97},{"text":"    pub fn clang_getCompletionAvailability(string: CXCompletionString) -> CXAvailabilityKind;","highlight_start":1,"highlight_end":94},{"text":"    pub fn clang_getCompletionBriefComment(string: CXCompletionString) -> CXString;","highlight_start":1,"highlight_end":84},{"text":"    pub fn clang_getCompletionChunkCompletionString(string: CXCompletionString, index: c_uint) -> CXCompletionString;","highlight_start":1,"highlight_end":118},{"text":"    pub fn clang_getCompletionChunkKind(string: CXCompletionString, index: c_uint) -> CXCompletionChunkKind;","highlight_start":1,"highlight_end":109},{"text":"    pub fn clang_getCompletionChunkText(string: CXCompletionString, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":96},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getCompletionFixIt(results: *mut CXCodeCompleteResults, completion_index: c_uint, fixit_index: c_uint, range: *mut CXSourceRange) -> CXString;","highlight_start":1,"highlight_end":160},{"text":"    pub fn clang_getCompletionNumAnnotations(string: CXCompletionString) -> c_uint;","highlight_start":1,"highlight_end":84},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getCompletionNumFixIts(results: *mut CXCodeCompleteResults, completion_index: c_uint) -> c_uint;","highlight_start":1,"highlight_end":114},{"text":"    pub fn clang_getCompletionParent(string: CXCompletionString, kind: *mut CXCursorKind) -> CXString;","highlight_start":1,"highlight_end":103},{"text":"    pub fn clang_getCompletionPriority(string: CXCompletionString) -> c_uint;","highlight_start":1,"highlight_end":78},{"text":"    pub fn clang_getCursor(tu: CXTranslationUnit, location: CXSourceLocation) -> CXCursor;","highlight_start":1,"highlight_end":91},{"text":"    pub fn clang_getCursorAvailability(cursor: CXCursor) -> CXAvailabilityKind;","highlight_start":1,"highlight_end":80},{"text":"    /// Only available on `libclang` 17.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_17_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_getCursorBinaryOperatorKind(cursor: CXCursor) -> CXBinaryOperatorKind;","highlight_start":1,"highlight_end":88},{"text":"    pub fn clang_getCursorCompletionString(cursor: CXCursor) -> CXCompletionString;","highlight_start":1,"highlight_end":84},{"text":"    pub fn clang_getCursorDefinition(cursor: CXCursor) -> CXCursor;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_getCursorDisplayName(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":69},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getCursorExceptionSpecificationType(cursor: CXCursor) -> CXCursor_ExceptionSpecificationKind;","highlight_start":1,"highlight_end":111},{"text":"    pub fn clang_getCursorExtent(cursor: CXCursor) -> CXSourceRange;","highlight_start":1,"highlight_end":69},{"text":"    pub fn clang_getCursorKind(cursor: CXCursor) -> CXCursorKind;","highlight_start":1,"highlight_end":66},{"text":"    pub fn clang_getCursorKindSpelling(kind: CXCursorKind) -> CXString;","highlight_start":1,"highlight_end":72},{"text":"    pub fn clang_getCursorLanguage(cursor: CXCursor) -> CXLanguageKind;","highlight_start":1,"highlight_end":72},{"text":"    pub fn clang_getCursorLexicalParent(cursor: CXCursor) -> CXCursor;","highlight_start":1,"highlight_end":71},{"text":"    pub fn clang_getCursorLinkage(cursor: CXCursor) -> CXLinkageKind;","highlight_start":1,"highlight_end":70},{"text":"    pub fn clang_getCursorLocation(cursor: CXCursor) -> CXSourceLocation;","highlight_start":1,"highlight_end":74},{"text":"    pub fn clang_getCursorPlatformAvailability(cursor: CXCursor, deprecated: *mut c_int, deprecated_message: *mut CXString, unavailable: *mut c_int, unavailable_message: *mut CXString, availability: *mut CXPlatformAvailability, n_availability: c_int) -> c_int;","highlight_start":1,"highlight_end":261},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getCursorPrettyPrinted(cursor: CXCursor, policy: CXPrintingPolicy) -> CXString;","highlight_start":1,"highlight_end":97},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getCursorPrintingPolicy(cursor: CXCursor) -> CXPrintingPolicy;","highlight_start":1,"highlight_end":80},{"text":"    pub fn clang_getCursorReferenceNameRange(cursor: CXCursor, flags: CXNameRefFlags, index: c_uint) -> CXSourceRange;","highlight_start":1,"highlight_end":119},{"text":"    pub fn clang_getCursorReferenced(cursor: CXCursor) -> CXCursor;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_getCursorResultType(cursor: CXCursor) -> CXType;","highlight_start":1,"highlight_end":66},{"text":"    pub fn clang_getCursorSemanticParent(cursor: CXCursor) -> CXCursor;","highlight_start":1,"highlight_end":72},{"text":"    pub fn clang_getCursorSpelling(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":66},{"text":"    /// Only available on `libclang` 6.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_6_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getCursorTLSKind(cursor: CXCursor) -> CXTLSKind;","highlight_start":1,"highlight_end":66},{"text":"    pub fn clang_getCursorType(cursor: CXCursor) -> CXType;","highlight_start":1,"highlight_end":60},{"text":"    /// Only available on `libclang` 17.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_17_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_getCursorUnaryOperatorKind(cursor: CXCursor) -> CXUnaryOperatorKind;","highlight_start":1,"highlight_end":86},{"text":"    pub fn clang_getCursorUSR(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":61},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getCursorVisibility(cursor: CXCursor) -> CXVisibilityKind;","highlight_start":1,"highlight_end":76},{"text":"    pub fn clang_getDeclObjCTypeEncoding(cursor: CXCursor) -> CXString;","highlight_start":1,"highlight_end":72},{"text":"    pub fn clang_getDefinitionSpellingAndExtent(cursor: CXCursor, start: *mut *const c_char, end: *mut *const c_char, start_line: *mut c_uint, start_column: *mut c_uint, end_line: *mut c_uint, end_column: *mut c_uint);","highlight_start":1,"highlight_end":219},{"text":"    pub fn clang_getDiagnostic(tu: CXTranslationUnit, index: c_uint) -> CXDiagnostic;","highlight_start":1,"highlight_end":86},{"text":"    pub fn clang_getDiagnosticCategory(diagnostic: CXDiagnostic) -> c_uint;","highlight_start":1,"highlight_end":76},{"text":"    pub fn clang_getDiagnosticCategoryName(category: c_uint) -> CXString;","highlight_start":1,"highlight_end":74},{"text":"    pub fn clang_getDiagnosticCategoryText(diagnostic: CXDiagnostic) -> CXString;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_getDiagnosticFixIt(diagnostic: CXDiagnostic, index: c_uint, range: *mut CXSourceRange) -> CXString;","highlight_start":1,"highlight_end":117},{"text":"    pub fn clang_getDiagnosticInSet(diagnostic: CXDiagnosticSet, index: c_uint) -> CXDiagnostic;","highlight_start":1,"highlight_end":97},{"text":"    pub fn clang_getDiagnosticLocation(diagnostic: CXDiagnostic) -> CXSourceLocation;","highlight_start":1,"highlight_end":86},{"text":"    pub fn clang_getDiagnosticNumFixIts(diagnostic: CXDiagnostic) -> c_uint;","highlight_start":1,"highlight_end":77},{"text":"    pub fn clang_getDiagnosticNumRanges(diagnostic: CXDiagnostic) -> c_uint;","highlight_start":1,"highlight_end":77},{"text":"    pub fn clang_getDiagnosticOption(diagnostic: CXDiagnostic, option: *mut CXString) -> CXString;","highlight_start":1,"highlight_end":99},{"text":"    pub fn clang_getDiagnosticRange(diagnostic: CXDiagnostic, index: c_uint) -> CXSourceRange;","highlight_start":1,"highlight_end":95},{"text":"    pub fn clang_getDiagnosticSetFromTU(tu: CXTranslationUnit) -> CXDiagnosticSet;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_getDiagnosticSeverity(diagnostic: CXDiagnostic) -> CXDiagnosticSeverity;","highlight_start":1,"highlight_end":90},{"text":"    pub fn clang_getDiagnosticSpelling(diagnostic: CXDiagnostic) -> CXString;","highlight_start":1,"highlight_end":78},{"text":"    pub fn clang_getElementType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":58},{"text":"    pub fn clang_getEnumConstantDeclUnsignedValue(cursor: CXCursor) -> c_ulonglong;","highlight_start":1,"highlight_end":84},{"text":"    pub fn clang_getEnumConstantDeclValue(cursor: CXCursor) -> c_longlong;","highlight_start":1,"highlight_end":75},{"text":"    pub fn clang_getEnumDeclIntegerType(cursor: CXCursor) -> CXType;","highlight_start":1,"highlight_end":69},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getExceptionSpecificationType(type_: CXType) -> CXCursor_ExceptionSpecificationKind;","highlight_start":1,"highlight_end":102},{"text":"    pub fn clang_getExpansionLocation(location: CXSourceLocation, file: *mut CXFile, line: *mut c_uint, column: *mut c_uint, offset: *mut c_uint);","highlight_start":1,"highlight_end":147},{"text":"    pub fn clang_getFieldDeclBitWidth(cursor: CXCursor) -> c_int;","highlight_start":1,"highlight_end":66},{"text":"    pub fn clang_getFile(tu: CXTranslationUnit, file: *const c_char) -> CXFile;","highlight_start":1,"highlight_end":80},{"text":"    /// Only available on `libclang` 6.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_6_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getFileContents(tu: CXTranslationUnit, file: CXFile, size: *mut size_t) -> *const c_char;","highlight_start":1,"highlight_end":107},{"text":"    pub fn clang_getFileLocation(location: CXSourceLocation, file: *mut CXFile, line: *mut c_uint, column: *mut c_uint, offset: *mut c_uint);","highlight_start":1,"highlight_end":142},{"text":"    pub fn clang_getFileName(file: CXFile) -> CXString;","highlight_start":1,"highlight_end":56},{"text":"    pub fn clang_getFileTime(file: CXFile) -> time_t;","highlight_start":1,"highlight_end":54},{"text":"    pub fn clang_getFileUniqueID(file: CXFile, id: *mut CXFileUniqueID) -> c_int;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_getFunctionTypeCallingConv(type_: CXType) -> CXCallingConv;","highlight_start":1,"highlight_end":77},{"text":"    pub fn clang_getIBOutletCollectionType(cursor: CXCursor) -> CXType;","highlight_start":1,"highlight_end":72},{"text":"    pub fn clang_getIncludedFile(cursor: CXCursor) -> CXFile;","highlight_start":1,"highlight_end":62},{"text":"    pub fn clang_getInclusions(tu: CXTranslationUnit, visitor: CXInclusionVisitor, data: CXClientData);","highlight_start":1,"highlight_end":104},{"text":"    pub fn clang_getInstantiationLocation(location: CXSourceLocation, file: *mut CXFile, line: *mut c_uint, column: *mut c_uint, offset: *mut c_uint);","highlight_start":1,"highlight_end":151},{"text":"    pub fn clang_getLocation(tu: CXTranslationUnit, file: CXFile, line: c_uint, column: c_uint) -> CXSourceLocation;","highlight_start":1,"highlight_end":117},{"text":"    pub fn clang_getLocationForOffset(tu: CXTranslationUnit, file: CXFile, offset: c_uint) -> CXSourceLocation;","highlight_start":1,"highlight_end":112},{"text":"    pub fn clang_getModuleForFile(tu: CXTranslationUnit, file: CXFile) -> CXModule;","highlight_start":1,"highlight_end":84},{"text":"    /// Only available on `libclang` 16.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_16_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_getNonReferenceType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":63},{"text":"    pub fn clang_getNullCursor() -> CXCursor;","highlight_start":1,"highlight_end":46},{"text":"    pub fn clang_getNullLocation() -> CXSourceLocation;","highlight_start":1,"highlight_end":56},{"text":"    pub fn clang_getNullRange() -> CXSourceRange;","highlight_start":1,"highlight_end":50},{"text":"    pub fn clang_getNumArgTypes(type_: CXType) -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    pub fn clang_getNumCompletionChunks(string: CXCompletionString) -> c_uint;","highlight_start":1,"highlight_end":79},{"text":"    pub fn clang_getNumDiagnostics(tu: CXTranslationUnit) -> c_uint;","highlight_start":1,"highlight_end":69},{"text":"    pub fn clang_getNumDiagnosticsInSet(diagnostic: CXDiagnosticSet) -> c_uint;","highlight_start":1,"highlight_end":80},{"text":"    pub fn clang_getNumElements(type_: CXType) -> c_longlong;","highlight_start":1,"highlight_end":62},{"text":"    pub fn clang_getNumOverloadedDecls(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_getOverloadedDecl(cursor: CXCursor, index: c_uint) -> CXCursor;","highlight_start":1,"highlight_end":81},{"text":"    pub fn clang_getOverriddenCursors(cursor: CXCursor, cursors: *mut *mut CXCursor, n_cursors: *mut c_uint);","highlight_start":1,"highlight_end":110},{"text":"    pub fn clang_getPointeeType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":58},{"text":"    pub fn clang_getPresumedLocation(location: CXSourceLocation, file: *mut CXString, line: *mut c_uint, column: *mut c_uint);","highlight_start":1,"highlight_end":127},{"text":"    pub fn clang_getRange(start: CXSourceLocation, end: CXSourceLocation) -> CXSourceRange;","highlight_start":1,"highlight_end":92},{"text":"    pub fn clang_getRangeEnd(range: CXSourceRange) -> CXSourceLocation;","highlight_start":1,"highlight_end":72},{"text":"    pub fn clang_getRangeStart(range: CXSourceRange) -> CXSourceLocation;","highlight_start":1,"highlight_end":74},{"text":"    pub fn clang_getRemappings(file: *const c_char) -> CXRemapping;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_getRemappingsFromFileList(files: *mut *const c_char, n_files: c_uint) -> CXRemapping;","highlight_start":1,"highlight_end":103},{"text":"    pub fn clang_getResultType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":57},{"text":"    pub fn clang_getSkippedRanges(tu: CXTranslationUnit, file: CXFile) -> *mut CXSourceRangeList;","highlight_start":1,"highlight_end":98},{"text":"    pub fn clang_getSpecializedCursorTemplate(cursor: CXCursor) -> CXCursor;","highlight_start":1,"highlight_end":77},{"text":"    pub fn clang_getSpellingLocation(location: CXSourceLocation, file: *mut CXFile, line: *mut c_uint, column: *mut c_uint, offset: *mut c_uint);","highlight_start":1,"highlight_end":146},{"text":"    pub fn clang_getTUResourceUsageName(kind: CXTUResourceUsageKind) -> *const c_char;","highlight_start":1,"highlight_end":87},{"text":"    pub fn clang_getTemplateCursorKind(cursor: CXCursor) -> CXCursorKind;","highlight_start":1,"highlight_end":74},{"text":"    pub fn clang_getToken(tu: CXTranslationUnit, location: CXSourceLocation) -> *mut CXToken;","highlight_start":1,"highlight_end":94},{"text":"    pub fn clang_getTokenExtent(tu: CXTranslationUnit, token: CXToken) -> CXSourceRange;","highlight_start":1,"highlight_end":89},{"text":"    pub fn clang_getTokenKind(token: CXToken) -> CXTokenKind;","highlight_start":1,"highlight_end":62},{"text":"    pub fn clang_getTokenLocation(tu: CXTranslationUnit, token: CXToken) -> CXSourceLocation;","highlight_start":1,"highlight_end":94},{"text":"    pub fn clang_getTokenSpelling(tu: CXTranslationUnit, token: CXToken) -> CXString;","highlight_start":1,"highlight_end":86},{"text":"    pub fn clang_getTranslationUnitCursor(tu: CXTranslationUnit) -> CXCursor;","highlight_start":1,"highlight_end":78},{"text":"    pub fn clang_getTranslationUnitSpelling(tu: CXTranslationUnit) -> CXString;","highlight_start":1,"highlight_end":80},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getTranslationUnitTargetInfo(tu: CXTranslationUnit) -> CXTargetInfo;","highlight_start":1,"highlight_end":86},{"text":"    /// Only available on `libclang` 17.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_17_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_getUnaryOperatorKindSpelling(kind: CXUnaryOperatorKind) -> CXString;","highlight_start":1,"highlight_end":86},{"text":"    /// Only available on `libclang` 16.0 and later.","highlight_start":1,"highlight_end":53},{"text":"    #[cfg(feature = \"clang_16_0\")]","highlight_start":1,"highlight_end":35},{"text":"    pub fn clang_getUnqualifiedType(type_: CXType) -> CXType;","highlight_start":1,"highlight_end":62},{"text":"    pub fn clang_getTypeDeclaration(type_: CXType) -> CXCursor;","highlight_start":1,"highlight_end":64},{"text":"    pub fn clang_getTypeKindSpelling(type_: CXTypeKind) -> CXString;","highlight_start":1,"highlight_end":69},{"text":"    pub fn clang_getTypeSpelling(type_: CXType) -> CXString;","highlight_start":1,"highlight_end":61},{"text":"    pub fn clang_getTypedefDeclUnderlyingType(cursor: CXCursor) -> CXType;","highlight_start":1,"highlight_end":75},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_getTypedefName(type_: CXType) -> CXString;","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_hashCursor(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":57},{"text":"    pub fn clang_indexLoc_getCXSourceLocation(location: CXIdxLoc) -> CXSourceLocation;","highlight_start":1,"highlight_end":87},{"text":"    pub fn clang_indexLoc_getFileLocation(location: CXIdxLoc, index_file: *mut CXIdxClientFile, file: *mut CXFile, line: *mut c_uint, column: *mut c_uint, offset: *mut c_uint);","highlight_start":1,"highlight_end":177},{"text":"    pub fn clang_indexSourceFile(index: CXIndexAction, data: CXClientData, callbacks: *mut IndexerCallbacks, n_callbacks: c_uint, index_flags: CXIndexOptFlags, file: *const c_char, arguments: *const *const c_char, n_arguments: c_int, unsaved: *mut CXUnsavedFile, n_unsaved: c_uint, tu: *mut CXTranslationUnit, tu_flags: CXTranslationUnit_Flags) -> CXErrorCode;","highlight_start":1,"highlight_end":361},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_indexSourceFileFullArgv(index: CXIndexAction, data: CXClientData, callbacks: *mut IndexerCallbacks, n_callbacks: c_uint, index_flags: CXIndexOptFlags, file: *const c_char, arguments: *const *const c_char, n_arguments: c_int, unsaved: *mut CXUnsavedFile, n_unsaved: c_uint, tu: *mut CXTranslationUnit, tu_flags: CXTranslationUnit_Flags) -> CXErrorCode;","highlight_start":1,"highlight_end":369},{"text":"    pub fn clang_indexTranslationUnit(index: CXIndexAction, data: CXClientData, callbacks: *mut IndexerCallbacks, n_callbacks: c_uint, flags: CXIndexOptFlags, tu: CXTranslationUnit) -> c_int;","highlight_start":1,"highlight_end":192},{"text":"    pub fn clang_index_getCXXClassDeclInfo(info: *const CXIdxDeclInfo) -> *const CXIdxCXXClassDeclInfo;","highlight_start":1,"highlight_end":104},{"text":"    pub fn clang_index_getClientContainer(info: *const CXIdxContainerInfo) -> CXIdxClientContainer;","highlight_start":1,"highlight_end":100},{"text":"    pub fn clang_index_getClientEntity(info: *const CXIdxEntityInfo) -> CXIdxClientEntity;","highlight_start":1,"highlight_end":91},{"text":"    pub fn clang_index_getIBOutletCollectionAttrInfo(info: *const CXIdxAttrInfo) -> *const CXIdxIBOutletCollectionAttrInfo;","highlight_start":1,"highlight_end":124},{"text":"    pub fn clang_index_getObjCCategoryDeclInfo(info: *const CXIdxDeclInfo) -> *const CXIdxObjCCategoryDeclInfo;","highlight_start":1,"highlight_end":112},{"text":"    pub fn clang_index_getObjCContainerDeclInfo(info: *const CXIdxDeclInfo) -> *const CXIdxObjCContainerDeclInfo;","highlight_start":1,"highlight_end":114},{"text":"    pub fn clang_index_getObjCInterfaceDeclInfo(info: *const CXIdxDeclInfo) -> *const CXIdxObjCInterfaceDeclInfo;","highlight_start":1,"highlight_end":114},{"text":"    pub fn clang_index_getObjCPropertyDeclInfo(info: *const CXIdxDeclInfo) -> *const CXIdxObjCPropertyDeclInfo;","highlight_start":1,"highlight_end":112},{"text":"    pub fn clang_index_getObjCProtocolRefListInfo(info: *const CXIdxDeclInfo) -> *const CXIdxObjCProtocolRefListInfo;","highlight_start":1,"highlight_end":118},{"text":"    pub fn clang_index_isEntityObjCContainerKind(info: CXIdxEntityKind) -> c_int;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_index_setClientContainer(info: *const CXIdxContainerInfo, container: CXIdxClientContainer);","highlight_start":1,"highlight_end":109},{"text":"    pub fn clang_index_setClientEntity(info: *const CXIdxEntityInfo, entity: CXIdxClientEntity);","highlight_start":1,"highlight_end":97},{"text":"    pub fn clang_isAttribute(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_isConstQualifiedType(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":64},{"text":"    pub fn clang_isCursorDefinition(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":65},{"text":"    pub fn clang_isDeclaration(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":62},{"text":"    pub fn clang_isExpression(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":61},{"text":"    pub fn clang_isFileMultipleIncludeGuarded(tu: CXTranslationUnit, file: CXFile) -> c_uint;","highlight_start":1,"highlight_end":94},{"text":"    pub fn clang_isFunctionTypeVariadic(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":66},{"text":"    pub fn clang_isInvalid(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":58},{"text":"    /// Only available on `libclang` 7.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_7_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_isInvalidDeclaration(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_isPODType(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":53},{"text":"    pub fn clang_isPreprocessing(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":64},{"text":"    pub fn clang_isReference(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_isRestrictQualifiedType(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_isStatement(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_isTranslationUnit(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":66},{"text":"    pub fn clang_isUnexposed(kind: CXCursorKind) -> c_uint;","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_isVirtualBase(cursor: CXCursor) -> c_uint;","highlight_start":1,"highlight_end":60},{"text":"    pub fn clang_isVolatileQualifiedType(type_: CXType) -> c_uint;","highlight_start":1,"highlight_end":67},{"text":"    pub fn clang_loadDiagnostics(file: *const c_char, error: *mut CXLoadDiag_Error, message: *mut CXString) -> CXDiagnosticSet;","highlight_start":1,"highlight_end":128},{"text":"    pub fn clang_parseTranslationUnit(index: CXIndex, file: *const c_char, arguments: *const *const c_char, n_arguments: c_int, unsaved: *mut CXUnsavedFile, n_unsaved: c_uint, flags: CXTranslationUnit_Flags) -> CXTranslationUnit;","highlight_start":1,"highlight_end":230},{"text":"    pub fn clang_parseTranslationUnit2(index: CXIndex, file: *const c_char, arguments: *const *const c_char, n_arguments: c_int, unsaved: *mut CXUnsavedFile, n_unsaved: c_uint, flags: CXTranslationUnit_Flags, tu: *mut CXTranslationUnit) -> CXErrorCode;","highlight_start":1,"highlight_end":253},{"text":"    /// Only available on `libclang` 3.8 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_3_8\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_parseTranslationUnit2FullArgv(index: CXIndex, file: *const c_char, arguments: *const *const c_char, n_arguments: c_int, unsaved: *mut CXUnsavedFile, n_unsaved: c_uint, flags: CXTranslationUnit_Flags, tu: *mut CXTranslationUnit) -> CXErrorCode;","highlight_start":1,"highlight_end":261},{"text":"    pub fn clang_remap_dispose(remapping: CXRemapping);","highlight_start":1,"highlight_end":56},{"text":"    pub fn clang_remap_getFilenames(remapping: CXRemapping, index: c_uint, original: *mut CXString, transformed: *mut CXString);","highlight_start":1,"highlight_end":129},{"text":"    pub fn clang_remap_getNumFiles(remapping: CXRemapping) -> c_uint;","highlight_start":1,"highlight_end":70},{"text":"    pub fn clang_reparseTranslationUnit(tu: CXTranslationUnit, n_unsaved: c_uint, unsaved: *mut CXUnsavedFile, flags: CXReparse_Flags) -> CXErrorCode;","highlight_start":1,"highlight_end":151},{"text":"    pub fn clang_saveTranslationUnit(tu: CXTranslationUnit, file: *const c_char, options: CXSaveTranslationUnit_Flags) -> CXSaveError;","highlight_start":1,"highlight_end":135},{"text":"    pub fn clang_sortCodeCompletionResults(results: *mut CXCompletionResult, n_results: c_uint);","highlight_start":1,"highlight_end":97},{"text":"    /// Only available on `libclang` 5.0 and later.","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(feature = \"clang_5_0\")]","highlight_start":1,"highlight_end":34},{"text":"    pub fn clang_suspendTranslationUnit(tu: CXTranslationUnit) -> c_uint;","highlight_start":1,"highlight_end":74},{"text":"    pub fn clang_toggleCrashRecovery(recovery: c_uint);","highlight_start":1,"highlight_end":56},{"text":"    pub fn clang_tokenize(tu: CXTranslationUnit, range: CXSourceRange, tokens: *mut *mut CXToken, n_tokens: *mut c_uint);","highlight_start":1,"highlight_end":122},{"text":"    pub fn clang_visitChildren(cursor: CXCursor, visitor: CXCursorVisitor, data: CXClientData) -> c_uint;","highlight_start":1,"highlight_end":106},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Documentation","highlight_start":1,"highlight_end":21},{"text":"    pub fn clang_BlockCommandComment_getArgText(comment: CXComment, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":96},{"text":"    pub fn clang_BlockCommandComment_getCommandName(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":85},{"text":"    pub fn clang_BlockCommandComment_getNumArgs(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":79},{"text":"    pub fn clang_BlockCommandComment_getParagraph(comment: CXComment) -> CXComment;","highlight_start":1,"highlight_end":84},{"text":"    pub fn clang_Comment_getChild(comment: CXComment, index: c_uint) -> CXComment;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_Comment_getKind(comment: CXComment) -> CXCommentKind;","highlight_start":1,"highlight_end":71},{"text":"    pub fn clang_Comment_getNumChildren(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":71},{"text":"    pub fn clang_Comment_isWhitespace(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":69},{"text":"    pub fn clang_Cursor_getParsedComment(C: CXCursor) -> CXComment;","highlight_start":1,"highlight_end":68},{"text":"    pub fn clang_FullComment_getAsHTML(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":72},{"text":"    pub fn clang_FullComment_getAsXML(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":71},{"text":"    pub fn clang_HTMLStartTag_getAttrName(comment: CXComment, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":90},{"text":"    pub fn clang_HTMLStartTag_getAttrValue(comment: CXComment, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":91},{"text":"    pub fn clang_HTMLStartTag_getNumAttrs(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":73},{"text":"    pub fn clang_HTMLStartTagComment_isSelfClosing(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_HTMLTagComment_getAsString(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":77},{"text":"    pub fn clang_HTMLTagComment_getTagName(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":76},{"text":"    pub fn clang_InlineCommandComment_getArgText(comment: CXComment, index: c_uint) -> CXString;","highlight_start":1,"highlight_end":97},{"text":"    pub fn clang_InlineCommandComment_getCommandName(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":86},{"text":"    pub fn clang_InlineCommandComment_getNumArgs(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":80},{"text":"    pub fn clang_InlineCommandComment_getRenderKind(comment: CXComment) -> CXCommentInlineCommandRenderKind;","highlight_start":1,"highlight_end":109},{"text":"    pub fn clang_InlineContentComment_hasTrailingNewline(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":88},{"text":"    pub fn clang_ParamCommandComment_getDirection(comment: CXComment) -> CXCommentParamPassDirection;","highlight_start":1,"highlight_end":102},{"text":"    pub fn clang_ParamCommandComment_getParamIndex(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":82},{"text":"    pub fn clang_ParamCommandComment_getParamName(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_ParamCommandComment_isDirectionExplicit(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":88},{"text":"    pub fn clang_ParamCommandComment_isParamIndexValid(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":86},{"text":"    pub fn clang_TextComment_getText(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":70},{"text":"    pub fn clang_TParamCommandComment_getDepth(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":78},{"text":"    pub fn clang_TParamCommandComment_getIndex(comment: CXComment, depth: c_uint) -> c_uint;","highlight_start":1,"highlight_end":93},{"text":"    pub fn clang_TParamCommandComment_getParamName(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":84},{"text":"    pub fn clang_TParamCommandComment_isParamPositionValid(comment: CXComment) -> c_uint;","highlight_start":1,"highlight_end":90},{"text":"    pub fn clang_VerbatimBlockLineComment_getText(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":83},{"text":"    pub fn clang_VerbatimLineComment_getText(comment: CXComment) -> CXString;","highlight_start":1,"highlight_end":78},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"link!","def_site_span":{"file_name":"/Users/bubu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/src/link.rs","byte_start":188,"byte_end":205,"line_start":8,"line_end":8,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! link {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected values for `feature` are: `clang_10_0`, `clang_11_0`, `clang_12_0`, `clang_13_0`, `clang_14_0`, `clang_15_0`, `clang_16_0`, `clang_17_0`, `clang_18_0`, `clang_3_5`, `clang_3_6`, `clang_3_7`, `clang_3_8`, `clang_3_9`, `clang_4_0`, `clang_5_0`, `clang_6_0`, `clang_7_0`, `clang_8_0`, `clang_9_0`, `libcpp`, `libloading`, `runtime`, and `static`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `cargo-clippy` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `cargo-clippy`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/bubu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/src/link.rs:174:24\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(feature=\"cargo-clippy\", allow(clippy::too_many_arguments))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/bubu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/src/lib.rs:1859:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1859\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mlink! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1860\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn clang_CXCursorSet_contains(set: CXCursorSet, cursor: CXCursor) -> c_uint;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1861\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn clang_CXCursorSet_insert(set: CXCursorSet, cursor: CXCursor) -> c_uint;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1862\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn clang_CXIndex_getGlobalOptions(index: CXIndex) -> CXGlobalOptFlags;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn clang_VerbatimLineComment_getText(comment: CXComment) -> CXString;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2433\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `clang_10_0`, `clang_11_0`, `clang_12_0`, `clang_13_0`, `clang_14_0`, `clang_15_0`, `clang_16_0`, `clang_17_0`, `clang_18_0`, `clang_3_5`, `clang_3_6`, `clang_3_7`, `clang_3_8`, `clang_3_9`, `clang_4_0`, `clang_5_0`, `clang_6_0`, `clang_7_0`, `clang_8_0`, `clang_9_0`, `libcpp`, `libloading`, `runtime`, and `static`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `cargo-clippy` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `link` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 3 warnings emitted\u001b[0m\n\n"}
